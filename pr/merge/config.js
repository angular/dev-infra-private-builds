/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/dev-infra-private/pr/merge/config", ["require", "exports", "tslib", "@angular/dev-infra-private/utils/config"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadAndValidateConfig = void 0;
    var tslib_1 = require("tslib");
    var config_1 = require("@angular/dev-infra-private/utils/config");
    /** Loads and validates the merge configuration. */
    function loadAndValidateConfig() {
        var config = config_1.getConfig();
        if (config.merge === undefined) {
            return {
                errors: ['No merge configuration found. Set the `merge` configuration.']
            };
        }
        if (typeof config.merge !== 'function') {
            return {
                errors: ['Expected merge configuration to be defined lazily through a function.']
            };
        }
        var mergeConfig = config.merge();
        var errors = validateMergeConfig(mergeConfig);
        if (errors.length) {
            return { errors: errors };
        }
        if (mergeConfig.remote) {
            mergeConfig.remote = tslib_1.__assign(tslib_1.__assign({}, config.github), mergeConfig.remote);
        }
        else {
            mergeConfig.remote = config.github;
        }
        // We always set the `remote` option, so we can safely cast the
        // config to `MergeConfigWithRemote`.
        return { config: mergeConfig };
    }
    exports.loadAndValidateConfig = loadAndValidateConfig;
    /** Validates the specified configuration. Returns a list of failure messages. */
    function validateMergeConfig(config) {
        var errors = [];
        if (!config.labels) {
            errors.push('No label configuration.');
        }
        else if (!Array.isArray(config.labels)) {
            errors.push('Label configuration needs to be an array.');
        }
        if (!config.claSignedLabel) {
            errors.push('No CLA signed label configured.');
        }
        if (!config.mergeReadyLabel) {
            errors.push('No merge ready label configured.');
        }
        if (config.githubApiMerge === undefined) {
            errors.push('No explicit choice of merge strategy. Please set `githubApiMerge`.');
        }
        return errors;
    }
});
//# sourceMappingURL=data:application/json;base64,