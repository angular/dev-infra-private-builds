/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { __awaiter, __generator } from "tslib";
/** Loads and validates the merge configuration. */
export function loadAndValidateConfig(config, api) {
    return __awaiter(this, void 0, void 0, function () {
        var mergeConfig, errors;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (config.merge === undefined) {
                        return [2 /*return*/, { errors: ['No merge configuration found. Set the `merge` configuration.'] }];
                    }
                    if (typeof config.merge !== 'function') {
                        return [2 /*return*/, { errors: ['Expected merge configuration to be defined lazily through a function.'] }];
                    }
                    return [4 /*yield*/, config.merge(api)];
                case 1:
                    mergeConfig = _a.sent();
                    errors = validateMergeConfig(mergeConfig);
                    if (errors.length) {
                        return [2 /*return*/, { errors: errors }];
                    }
                    return [2 /*return*/, { config: mergeConfig }];
            }
        });
    });
}
/** Validates the specified configuration. Returns a list of failure messages. */
function validateMergeConfig(config) {
    var errors = [];
    if (!config.labels) {
        errors.push('No label configuration.');
    }
    else if (!Array.isArray(config.labels)) {
        errors.push('Label configuration needs to be an array.');
    }
    if (!config.claSignedLabel) {
        errors.push('No CLA signed label configured.');
    }
    if (!config.mergeReadyLabel) {
        errors.push('No merge ready label configured.');
    }
    if (config.githubApiMerge === undefined) {
        errors.push('No explicit choice of merge strategy. Please set `githubApiMerge`.');
    }
    return errors;
}
//# sourceMappingURL=data:application/json;base64,