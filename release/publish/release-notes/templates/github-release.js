/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/dev-infra-private/release/publish/release-notes/templates/github-release", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = "\n<a name=\"<%- version %>\"></a>\n# <%- version %><% if (title) { %> \"<%- title %>\"<% } %> (<%- dateStamp %>)\n\n<%_\nconst commitsInChangelog = commits.filter(includeInReleaseNotes());\nfor (const group of asCommitGroups(commitsInChangelog)) {\n_%>\n\n### <%- group.title %>\n| Commit | Description |\n| -- | -- |\n<%_\n  for (const commit of group.commits) {\n_%>\n| <%- commit.shortHash %> | <%- commit.header %> |\n<%_\n  }\n}\n_%>\n\n<%_\nconst breakingChanges = commits.filter(contains('breakingChanges'));\nif (breakingChanges.length) {\n_%>\n## Breaking Changes\n\n<%_\n  for (const group of asCommitGroups(breakingChanges)) {\n_%>\n### <%- group.title %>\n\n<%_\n    for (const commit of group.commits) {\n_%>\n<%- commit.breakingChanges[0].text %>\n\n<%_\n    }\n  }\n}\n_%>\n\n<%_\nconst deprecations = commits.filter(contains('deprecations'));\nif (deprecations.length) {\n_%>\n## Deprecations\n<%_\n  for (const group of asCommitGroups(deprecations)) {\n_%>\n### <%- group.title %>\n\n<%_\n    for (const commit of group.commits) {\n_%>\n<%- commit.deprecations[0].text %>\n<%_\n    }\n  }\n}\n_%>\n\n<%_\nconst authors = commits.filter(unique('author')).map(c => c.author).sort();\nif (authors.length === 1) {\n_%>\n## Special Thanks:\n<%- authors[0]%>\n<%_\n}\nif (authors.length > 1) {\n_%>\n## Special Thanks:\n<%- authors.slice(0, -1).join(', ') %> and <%- authors.slice(-1)[0] %>\n<%_\n}\n_%>\n";
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLXJlbGVhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9kZXYtaW5mcmEvcmVsZWFzZS9wdWJsaXNoL3JlbGVhc2Utbm90ZXMvdGVtcGxhdGVzL2dpdGh1Yi1yZWxlYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7Ozs7Ozs7Ozs7O0lBRUgsa0JBQWUsMDRDQThFZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGBcbjxhIG5hbWU9XCI8JS0gdmVyc2lvbiAlPlwiPjwvYT5cbiMgPCUtIHZlcnNpb24gJT48JSBpZiAodGl0bGUpIHsgJT4gXCI8JS0gdGl0bGUgJT5cIjwlIH0gJT4gKDwlLSBkYXRlU3RhbXAgJT4pXG5cbjwlX1xuY29uc3QgY29tbWl0c0luQ2hhbmdlbG9nID0gY29tbWl0cy5maWx0ZXIoaW5jbHVkZUluUmVsZWFzZU5vdGVzKCkpO1xuZm9yIChjb25zdCBncm91cCBvZiBhc0NvbW1pdEdyb3Vwcyhjb21taXRzSW5DaGFuZ2Vsb2cpKSB7XG5fJT5cblxuIyMjIDwlLSBncm91cC50aXRsZSAlPlxufCBDb21taXQgfCBEZXNjcmlwdGlvbiB8XG58IC0tIHwgLS0gfFxuPCVfXG4gIGZvciAoY29uc3QgY29tbWl0IG9mIGdyb3VwLmNvbW1pdHMpIHtcbl8lPlxufCA8JS0gY29tbWl0LnNob3J0SGFzaCAlPiB8IDwlLSBjb21taXQuaGVhZGVyICU+IHxcbjwlX1xuICB9XG59XG5fJT5cblxuPCVfXG5jb25zdCBicmVha2luZ0NoYW5nZXMgPSBjb21taXRzLmZpbHRlcihjb250YWlucygnYnJlYWtpbmdDaGFuZ2VzJykpO1xuaWYgKGJyZWFraW5nQ2hhbmdlcy5sZW5ndGgpIHtcbl8lPlxuIyMgQnJlYWtpbmcgQ2hhbmdlc1xuXG48JV9cbiAgZm9yIChjb25zdCBncm91cCBvZiBhc0NvbW1pdEdyb3VwcyhicmVha2luZ0NoYW5nZXMpKSB7XG5fJT5cbiMjIyA8JS0gZ3JvdXAudGl0bGUgJT5cblxuPCVfXG4gICAgZm9yIChjb25zdCBjb21taXQgb2YgZ3JvdXAuY29tbWl0cykge1xuXyU+XG48JS0gY29tbWl0LmJyZWFraW5nQ2hhbmdlc1swXS50ZXh0ICU+XG5cbjwlX1xuICAgIH1cbiAgfVxufVxuXyU+XG5cbjwlX1xuY29uc3QgZGVwcmVjYXRpb25zID0gY29tbWl0cy5maWx0ZXIoY29udGFpbnMoJ2RlcHJlY2F0aW9ucycpKTtcbmlmIChkZXByZWNhdGlvbnMubGVuZ3RoKSB7XG5fJT5cbiMjIERlcHJlY2F0aW9uc1xuPCVfXG4gIGZvciAoY29uc3QgZ3JvdXAgb2YgYXNDb21taXRHcm91cHMoZGVwcmVjYXRpb25zKSkge1xuXyU+XG4jIyMgPCUtIGdyb3VwLnRpdGxlICU+XG5cbjwlX1xuICAgIGZvciAoY29uc3QgY29tbWl0IG9mIGdyb3VwLmNvbW1pdHMpIHtcbl8lPlxuPCUtIGNvbW1pdC5kZXByZWNhdGlvbnNbMF0udGV4dCAlPlxuPCVfXG4gICAgfVxuICB9XG59XG5fJT5cblxuPCVfXG5jb25zdCBhdXRob3JzID0gY29tbWl0cy5maWx0ZXIodW5pcXVlKCdhdXRob3InKSkubWFwKGMgPT4gYy5hdXRob3IpLnNvcnQoKTtcbmlmIChhdXRob3JzLmxlbmd0aCA9PT0gMSkge1xuXyU+XG4jIyBTcGVjaWFsIFRoYW5rczpcbjwlLSBhdXRob3JzWzBdJT5cbjwlX1xufVxuaWYgKGF1dGhvcnMubGVuZ3RoID4gMSkge1xuXyU+XG4jIyBTcGVjaWFsIFRoYW5rczpcbjwlLSBhdXRob3JzLnNsaWNlKDAsIC0xKS5qb2luKCcsICcpICU+IGFuZCA8JS0gYXV0aG9ycy5zbGljZSgtMSlbMF0gJT5cbjwlX1xufVxuXyU+XG5gO1xuIl19