/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { __awaiter } from "tslib";
import fetch from 'node-fetch';
/**
 * Cache for requested NPM package information. A cache is desirable as the NPM
 * registry requests are usually very large and slow.
 */
export const _npmPackageInfoCache = {};
/**
 * Fetches the NPM package representing the project. Angular repositories usually contain
 * multiple packages in a monorepo scheme, but packages dealt with as part of the release
 * tooling are released together with the same versioning and branching. This means that
 * a single package can be used as source of truth for NPM package queries.
 */
export function fetchProjectNpmPackageInfo(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const pkgName = getRepresentativeNpmPackage(config);
        return yield fetchPackageInfoFromNpmRegistry(pkgName);
    });
}
/** Gets whether the given version is published to NPM or not */
export function isVersionPublishedToNpm(version, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const { versions } = yield fetchProjectNpmPackageInfo(config);
        return versions[version.format()] !== undefined;
    });
}
/**
 * Gets the representative NPM package for the specified release configuration. Angular
 * repositories usually contain multiple packages in a monorepo scheme, but packages dealt with
 * as part of the release tooling are released together with the same versioning and branching.
 * This means that a single package can be used as source of truth for NPM package queries.
 */
function getRepresentativeNpmPackage(config) {
    return config.npmPackages[0];
}
/** Fetches the specified NPM package from the NPM registry. */
function fetchPackageInfoFromNpmRegistry(pkgName) {
    return __awaiter(this, void 0, void 0, function* () {
        if (_npmPackageInfoCache[pkgName] === undefined) {
            _npmPackageInfoCache[pkgName] =
                fetch(`https://registry.npmjs.org/${pkgName}`).then(r => r.json());
        }
        return yield _npmPackageInfoCache[pkgName];
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLXJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZGV2LWluZnJhL3JlbGVhc2UvdmVyc2lvbmluZy9ucG0tcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOztBQUVILE9BQU8sS0FBSyxNQUFNLFlBQVksQ0FBQztBQW1CL0I7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQWlELEVBQUUsQ0FBQztBQUVyRjs7Ozs7R0FLRztBQUNILE1BQU0sVUFBZ0IsMEJBQTBCLENBQUMsTUFBcUI7O1FBQ3BFLE1BQU0sT0FBTyxHQUFHLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BELE9BQU8sTUFBTSwrQkFBK0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQUE7QUFFRCxnRUFBZ0U7QUFDaEUsTUFBTSxVQUFnQix1QkFBdUIsQ0FDekMsT0FBc0IsRUFBRSxNQUFxQjs7UUFDL0MsTUFBTSxFQUFDLFFBQVEsRUFBQyxHQUFHLE1BQU0sMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUQsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssU0FBUyxDQUFDO0lBQ2xELENBQUM7Q0FBQTtBQUVEOzs7OztHQUtHO0FBQ0gsU0FBUywyQkFBMkIsQ0FBQyxNQUFxQjtJQUN4RCxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUVELCtEQUErRDtBQUMvRCxTQUFlLCtCQUErQixDQUFDLE9BQWU7O1FBQzVELElBQUksb0JBQW9CLENBQUMsT0FBTyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQy9DLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztnQkFDekIsS0FBSyxDQUFDLDhCQUE4QixPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxNQUFNLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgKiBhcyBzZW12ZXIgZnJvbSAnc2VtdmVyJztcblxuaW1wb3J0IHtSZWxlYXNlQ29uZmlnfSBmcm9tICcuLi9jb25maWcvaW5kZXgnO1xuaW1wb3J0IHtMdHNOcG1EaXN0VGFnfSBmcm9tICcuL2xvbmctdGVybS1zdXBwb3J0JztcblxuLyoqIFR5cGUgZGVzY3JpYmluZyB0aGUgcG9zc2libGUgTlBNIGRpc3QgdGFncyB1c2VkIGJ5IEFuZ3VsYXIgcGFja2FnZXMuICovXG5leHBvcnQgdHlwZSBOcG1EaXN0VGFnID0gJ2xhdGVzdCd8J25leHQnfEx0c05wbURpc3RUYWc7XG5cbi8qKiBUeXBlIGRlc2NyaWJpbmcgYW4gTlBNIHBhY2thZ2UgZmV0Y2hlZCBmcm9tIHRoZSByZWdpc3RyeS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTnBtUGFja2FnZUluZm8ge1xuICAvKiogTWFwcyBvZiB2ZXJzaW9ucyBhbmQgdGhlaXIgcGFja2FnZSBKU09OIG9iamVjdHMuICovXG4gICd2ZXJzaW9ucyc6IHtbbmFtZTogc3RyaW5nXTogdW5kZWZpbmVkfG9iamVjdH07XG4gIC8qKiBNYXAgb2YgTlBNIGRpc3QtdGFncyBhbmQgdGhlaXIgY2hvc2VuIHZlcnNpb24uICovXG4gICdkaXN0LXRhZ3MnOiB7W3RhZ05hbWU6IHN0cmluZ106IHN0cmluZ3x1bmRlZmluZWR9O1xuICAvKiogTWFwIG9mIHZlcnNpb25zIGFuZCB0aGVpciBJU08gcmVsZWFzZSB0aW1lLiAqL1xuICAndGltZSc6IHtbbmFtZTogc3RyaW5nXTogc3RyaW5nfTtcbn1cblxuLyoqXG4gKiBDYWNoZSBmb3IgcmVxdWVzdGVkIE5QTSBwYWNrYWdlIGluZm9ybWF0aW9uLiBBIGNhY2hlIGlzIGRlc2lyYWJsZSBhcyB0aGUgTlBNXG4gKiByZWdpc3RyeSByZXF1ZXN0cyBhcmUgdXN1YWxseSB2ZXJ5IGxhcmdlIGFuZCBzbG93LlxuICovXG5leHBvcnQgY29uc3QgX25wbVBhY2thZ2VJbmZvQ2FjaGU6IHtbcGtnTmFtZTogc3RyaW5nXTogUHJvbWlzZTxOcG1QYWNrYWdlSW5mbz59ID0ge307XG5cbi8qKlxuICogRmV0Y2hlcyB0aGUgTlBNIHBhY2thZ2UgcmVwcmVzZW50aW5nIHRoZSBwcm9qZWN0LiBBbmd1bGFyIHJlcG9zaXRvcmllcyB1c3VhbGx5IGNvbnRhaW5cbiAqIG11bHRpcGxlIHBhY2thZ2VzIGluIGEgbW9ub3JlcG8gc2NoZW1lLCBidXQgcGFja2FnZXMgZGVhbHQgd2l0aCBhcyBwYXJ0IG9mIHRoZSByZWxlYXNlXG4gKiB0b29saW5nIGFyZSByZWxlYXNlZCB0b2dldGhlciB3aXRoIHRoZSBzYW1lIHZlcnNpb25pbmcgYW5kIGJyYW5jaGluZy4gVGhpcyBtZWFucyB0aGF0XG4gKiBhIHNpbmdsZSBwYWNrYWdlIGNhbiBiZSB1c2VkIGFzIHNvdXJjZSBvZiB0cnV0aCBmb3IgTlBNIHBhY2thZ2UgcXVlcmllcy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoUHJvamVjdE5wbVBhY2thZ2VJbmZvKGNvbmZpZzogUmVsZWFzZUNvbmZpZyk6IFByb21pc2U8TnBtUGFja2FnZUluZm8+IHtcbiAgY29uc3QgcGtnTmFtZSA9IGdldFJlcHJlc2VudGF0aXZlTnBtUGFja2FnZShjb25maWcpO1xuICByZXR1cm4gYXdhaXQgZmV0Y2hQYWNrYWdlSW5mb0Zyb21OcG1SZWdpc3RyeShwa2dOYW1lKTtcbn1cblxuLyoqIEdldHMgd2hldGhlciB0aGUgZ2l2ZW4gdmVyc2lvbiBpcyBwdWJsaXNoZWQgdG8gTlBNIG9yIG5vdCAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzVmVyc2lvblB1Ymxpc2hlZFRvTnBtKFxuICAgIHZlcnNpb246IHNlbXZlci5TZW1WZXIsIGNvbmZpZzogUmVsZWFzZUNvbmZpZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCB7dmVyc2lvbnN9ID0gYXdhaXQgZmV0Y2hQcm9qZWN0TnBtUGFja2FnZUluZm8oY29uZmlnKTtcbiAgcmV0dXJuIHZlcnNpb25zW3ZlcnNpb24uZm9ybWF0KCldICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgcmVwcmVzZW50YXRpdmUgTlBNIHBhY2thZ2UgZm9yIHRoZSBzcGVjaWZpZWQgcmVsZWFzZSBjb25maWd1cmF0aW9uLiBBbmd1bGFyXG4gKiByZXBvc2l0b3JpZXMgdXN1YWxseSBjb250YWluIG11bHRpcGxlIHBhY2thZ2VzIGluIGEgbW9ub3JlcG8gc2NoZW1lLCBidXQgcGFja2FnZXMgZGVhbHQgd2l0aFxuICogYXMgcGFydCBvZiB0aGUgcmVsZWFzZSB0b29saW5nIGFyZSByZWxlYXNlZCB0b2dldGhlciB3aXRoIHRoZSBzYW1lIHZlcnNpb25pbmcgYW5kIGJyYW5jaGluZy5cbiAqIFRoaXMgbWVhbnMgdGhhdCBhIHNpbmdsZSBwYWNrYWdlIGNhbiBiZSB1c2VkIGFzIHNvdXJjZSBvZiB0cnV0aCBmb3IgTlBNIHBhY2thZ2UgcXVlcmllcy5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVwcmVzZW50YXRpdmVOcG1QYWNrYWdlKGNvbmZpZzogUmVsZWFzZUNvbmZpZykge1xuICByZXR1cm4gY29uZmlnLm5wbVBhY2thZ2VzWzBdO1xufVxuXG4vKiogRmV0Y2hlcyB0aGUgc3BlY2lmaWVkIE5QTSBwYWNrYWdlIGZyb20gdGhlIE5QTSByZWdpc3RyeS4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoUGFja2FnZUluZm9Gcm9tTnBtUmVnaXN0cnkocGtnTmFtZTogc3RyaW5nKTogUHJvbWlzZTxOcG1QYWNrYWdlSW5mbz4ge1xuICBpZiAoX25wbVBhY2thZ2VJbmZvQ2FjaGVbcGtnTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIF9ucG1QYWNrYWdlSW5mb0NhY2hlW3BrZ05hbWVdID1cbiAgICAgICAgZmV0Y2goYGh0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnLyR7cGtnTmFtZX1gKS50aGVuKHIgPT4gci5qc29uKCkpO1xuICB9XG4gIHJldHVybiBhd2FpdCBfbnBtUGFja2FnZUluZm9DYWNoZVtwa2dOYW1lXTtcbn1cbiJdfQ==