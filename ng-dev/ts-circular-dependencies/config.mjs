"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadTestConfig = void 0;
const path_1 = require("path");
const console_1 = require("../utils/console");
/**
 * Loads the configuration for the circular dependencies test. If the config cannot be
 * loaded, an error will be printed and the process exists with a non-zero exit code.
 */
function loadTestConfig(configPath) {
    const configBaseDir = path_1.dirname(configPath);
    const resolveRelativePath = (relativePath) => path_1.resolve(configBaseDir, relativePath);
    try {
        const config = require(configPath);
        if (!path_1.isAbsolute(config.baseDir)) {
            config.baseDir = resolveRelativePath(config.baseDir);
        }
        if (!path_1.isAbsolute(config.goldenFile)) {
            config.goldenFile = resolveRelativePath(config.goldenFile);
        }
        if (!path_1.isAbsolute(config.glob)) {
            config.glob = resolveRelativePath(config.glob);
        }
        return config;
    }
    catch (e) {
        console_1.error('Could not load test configuration file at: ' + configPath);
        console_1.error(`Failed with: ${e.message}`);
        process.exit(1);
    }
}
exports.loadTestConfig = loadTestConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmctZGV2L3RzLWNpcmN1bGFyLWRlcGVuZGVuY2llcy9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsK0JBQWtEO0FBRWxELDhDQUF1QztBQXdCdkM7OztHQUdHO0FBQ0gsU0FBZ0IsY0FBYyxDQUFDLFVBQWtCO0lBQy9DLE1BQU0sYUFBYSxHQUFHLGNBQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsWUFBb0IsRUFBRSxFQUFFLENBQUMsY0FBTyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUUzRixJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBbUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsaUJBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEQ7UUFDRCxJQUFJLENBQUMsaUJBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbEMsTUFBTSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDNUQ7UUFDRCxJQUFJLENBQUMsaUJBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUIsTUFBTSxDQUFDLElBQUksR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixlQUFLLENBQUMsNkNBQTZDLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDbEUsZUFBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pCO0FBQ0gsQ0FBQztBQXJCRCx3Q0FxQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtkaXJuYW1lLCBpc0Fic29sdXRlLCByZXNvbHZlfSBmcm9tICdwYXRoJztcblxuaW1wb3J0IHtlcnJvcn0gZnJvbSAnLi4vdXRpbHMvY29uc29sZSc7XG5cbmltcG9ydCB7TW9kdWxlUmVzb2x2ZXJ9IGZyb20gJy4vYW5hbHl6ZXInO1xuXG4vKiogQ29uZmlndXJhdGlvbiBmb3IgYSBjaXJjdWxhciBkZXBlbmRlbmNpZXMgdGVzdC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2lyY3VsYXJEZXBlbmRlbmNpZXNUZXN0Q29uZmlnIHtcbiAgLyoqIEJhc2UgZGlyZWN0b3J5IHVzZWQgZm9yIHNob3J0ZW5pbmcgcGF0aHMgaW4gdGhlIGdvbGRlbiBmaWxlLiAqL1xuICBiYXNlRGlyOiBzdHJpbmc7XG4gIC8qKiBQYXRoIHRvIHRoZSBnb2xkZW4gZmlsZSB0aGF0IGlzIHVzZWQgZm9yIGNoZWNraW5nIGFuZCBhcHByb3ZpbmcuICovXG4gIGdvbGRlbkZpbGU6IHN0cmluZztcbiAgLyoqIEdsb2IgdGhhdCByZXNvbHZlcyBzb3VyY2UgZmlsZXMgd2hpY2ggc2hvdWxkIGJlIGNoZWNrZWQuICovXG4gIGdsb2I6IHN0cmluZztcbiAgLyoqXG4gICAqIE9wdGlvbmFsIG1vZHVsZSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc29sdmUgbW9kdWxlc1xuICAgKiB0byBhYnNvbHV0ZSBmaWxlIHBhdGhzLlxuICAgKi9cbiAgcmVzb2x2ZU1vZHVsZT86IE1vZHVsZVJlc29sdmVyO1xuICAvKipcbiAgICogT3B0aW9uYWwgY29tbWFuZCB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIGlmIHRoZSBnb2xkZW4gY2hlY2sgZmFpbGVkLiBUaGlzIGNhbiBiZSB1c2VkXG4gICAqIHRvIGNvbnNpc3RlbnRseSB1c2Ugc2NyaXB0IGFsaWFzZXMgZm9yIGNoZWNraW5nL2FwcHJvdmluZyB0aGUgZ29sZGVuLlxuICAgKi9cbiAgYXBwcm92ZUNvbW1hbmQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogTG9hZHMgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBjaXJjdWxhciBkZXBlbmRlbmNpZXMgdGVzdC4gSWYgdGhlIGNvbmZpZyBjYW5ub3QgYmVcbiAqIGxvYWRlZCwgYW4gZXJyb3Igd2lsbCBiZSBwcmludGVkIGFuZCB0aGUgcHJvY2VzcyBleGlzdHMgd2l0aCBhIG5vbi16ZXJvIGV4aXQgY29kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRUZXN0Q29uZmlnKGNvbmZpZ1BhdGg6IHN0cmluZyk6IENpcmN1bGFyRGVwZW5kZW5jaWVzVGVzdENvbmZpZyB7XG4gIGNvbnN0IGNvbmZpZ0Jhc2VEaXIgPSBkaXJuYW1lKGNvbmZpZ1BhdGgpO1xuICBjb25zdCByZXNvbHZlUmVsYXRpdmVQYXRoID0gKHJlbGF0aXZlUGF0aDogc3RyaW5nKSA9PiByZXNvbHZlKGNvbmZpZ0Jhc2VEaXIsIHJlbGF0aXZlUGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjb25maWcgPSByZXF1aXJlKGNvbmZpZ1BhdGgpIGFzIENpcmN1bGFyRGVwZW5kZW5jaWVzVGVzdENvbmZpZztcbiAgICBpZiAoIWlzQWJzb2x1dGUoY29uZmlnLmJhc2VEaXIpKSB7XG4gICAgICBjb25maWcuYmFzZURpciA9IHJlc29sdmVSZWxhdGl2ZVBhdGgoY29uZmlnLmJhc2VEaXIpO1xuICAgIH1cbiAgICBpZiAoIWlzQWJzb2x1dGUoY29uZmlnLmdvbGRlbkZpbGUpKSB7XG4gICAgICBjb25maWcuZ29sZGVuRmlsZSA9IHJlc29sdmVSZWxhdGl2ZVBhdGgoY29uZmlnLmdvbGRlbkZpbGUpO1xuICAgIH1cbiAgICBpZiAoIWlzQWJzb2x1dGUoY29uZmlnLmdsb2IpKSB7XG4gICAgICBjb25maWcuZ2xvYiA9IHJlc29sdmVSZWxhdGl2ZVBhdGgoY29uZmlnLmdsb2IpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IoJ0NvdWxkIG5vdCBsb2FkIHRlc3QgY29uZmlndXJhdGlvbiBmaWxlIGF0OiAnICsgY29uZmlnUGF0aCk7XG4gICAgZXJyb3IoYEZhaWxlZCB3aXRoOiAke2UubWVzc2FnZX1gKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbn1cbiJdfQ==