"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildFormatParser = void 0;
const git_client_1 = require("../utils/git/git-client");
const format_1 = require("./format");
/** Build the parser for the format commands. */
function buildFormatParser(localYargs) {
    return localYargs
        .help()
        .strict()
        .demandCommand()
        .option('check', {
        type: 'boolean',
        default: process.env['CI'] ? true : false,
        description: 'Run the formatter to check formatting rather than updating code format',
    })
        .command('all', 'Run the formatter on all files in the repository', (args) => args, async ({ check }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allFiles = git_client_1.GitClient.get().allFiles();
        process.exitCode = await executionCmd(allFiles);
    })
        .command('changed [shaOrRef]', 'Run the formatter on files changed since the provided sha/ref', (args) => args.positional('shaOrRef', { type: 'string' }), async ({ shaOrRef, check }) => {
        const git = git_client_1.GitClient.get();
        const sha = shaOrRef || git.mainBranchName;
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allChangedFilesSince = git.allChangesFilesSince(sha);
        process.exitCode = await executionCmd(allChangedFilesSince);
    })
        .command('staged', 'Run the formatter on all staged files', (args) => args, async ({ check }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allStagedFiles = git_client_1.GitClient.get().allStagedFiles();
        process.exitCode = await executionCmd(allStagedFiles);
        if (!check && process.exitCode === 0) {
            git_client_1.GitClient.get().runGraceful(['add', ...allStagedFiles]);
        }
    })
        .command('files <files..>', 'Run the formatter on provided files', (args) => args.positional('files', { array: true, type: 'string' }), async ({ check, files }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        process.exitCode = await executionCmd(files);
    });
}
exports.buildFormatParser = buildFormatParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmctZGV2L2Zvcm1hdC9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsd0RBQWtEO0FBRWxELHFDQUFpRDtBQUVqRCxnREFBZ0Q7QUFDaEQsU0FBZ0IsaUJBQWlCLENBQUMsVUFBc0I7SUFDdEQsT0FBTyxVQUFVO1NBQ2QsSUFBSSxFQUFFO1NBQ04sTUFBTSxFQUFFO1NBQ1IsYUFBYSxFQUFFO1NBQ2YsTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUNmLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztRQUN6QyxXQUFXLEVBQUUsd0VBQXdFO0tBQ3RGLENBQUM7U0FDRCxPQUFPLENBQ04sS0FBSyxFQUNMLGtEQUFrRCxFQUNsRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUNkLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUU7UUFDaEIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQkFBVSxDQUFDLENBQUMsQ0FBQyxvQkFBVyxDQUFDO1FBQ3RELE1BQU0sUUFBUSxHQUFHLHNCQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQ0Y7U0FDQSxPQUFPLENBQ04sb0JBQW9CLEVBQ3BCLCtEQUErRCxFQUMvRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDdkQsS0FBSyxFQUFFLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUU7UUFDMUIsTUFBTSxHQUFHLEdBQUcsc0JBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM1QixNQUFNLEdBQUcsR0FBRyxRQUFRLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQztRQUMzQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFVLENBQUMsQ0FBQyxDQUFDLG9CQUFXLENBQUM7UUFDdEQsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FDRjtTQUNBLE9BQU8sQ0FDTixRQUFRLEVBQ1IsdUNBQXVDLEVBQ3ZDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQ2QsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRTtRQUNoQixNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFVLENBQUMsQ0FBQyxDQUFDLG9CQUFXLENBQUM7UUFDdEQsTUFBTSxjQUFjLEdBQUcsc0JBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN4RCxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUU7WUFDcEMsc0JBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQyxDQUNGO1NBQ0EsT0FBTyxDQUNOLGlCQUFpQixFQUNqQixxQ0FBcUMsRUFDckMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDakUsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUU7UUFDdkIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQkFBVSxDQUFDLENBQUMsQ0FBQyxvQkFBVyxDQUFDO1FBQ3RELE9BQU8sQ0FBQyxRQUFRLEdBQUcsTUFBTSxZQUFZLENBQUMsS0FBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUNGLENBQUM7QUFDTixDQUFDO0FBdERELDhDQXNEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0ICogYXMgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHtHaXRDbGllbnR9IGZyb20gJy4uL3V0aWxzL2dpdC9naXQtY2xpZW50JztcblxuaW1wb3J0IHtjaGVja0ZpbGVzLCBmb3JtYXRGaWxlc30gZnJvbSAnLi9mb3JtYXQnO1xuXG4vKiogQnVpbGQgdGhlIHBhcnNlciBmb3IgdGhlIGZvcm1hdCBjb21tYW5kcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEZvcm1hdFBhcnNlcihsb2NhbFlhcmdzOiB5YXJncy5Bcmd2KSB7XG4gIHJldHVybiBsb2NhbFlhcmdzXG4gICAgLmhlbHAoKVxuICAgIC5zdHJpY3QoKVxuICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAub3B0aW9uKCdjaGVjaycsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlZmF1bHQ6IHByb2Nlc3MuZW52WydDSSddID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgZGVzY3JpcHRpb246ICdSdW4gdGhlIGZvcm1hdHRlciB0byBjaGVjayBmb3JtYXR0aW5nIHJhdGhlciB0aGFuIHVwZGF0aW5nIGNvZGUgZm9ybWF0JyxcbiAgICB9KVxuICAgIC5jb21tYW5kKFxuICAgICAgJ2FsbCcsXG4gICAgICAnUnVuIHRoZSBmb3JtYXR0ZXIgb24gYWxsIGZpbGVzIGluIHRoZSByZXBvc2l0b3J5JyxcbiAgICAgIChhcmdzKSA9PiBhcmdzLFxuICAgICAgYXN5bmMgKHtjaGVja30pID0+IHtcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uQ21kID0gY2hlY2sgPyBjaGVja0ZpbGVzIDogZm9ybWF0RmlsZXM7XG4gICAgICAgIGNvbnN0IGFsbEZpbGVzID0gR2l0Q2xpZW50LmdldCgpLmFsbEZpbGVzKCk7XG4gICAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSBhd2FpdCBleGVjdXRpb25DbWQoYWxsRmlsZXMpO1xuICAgICAgfSxcbiAgICApXG4gICAgLmNvbW1hbmQoXG4gICAgICAnY2hhbmdlZCBbc2hhT3JSZWZdJyxcbiAgICAgICdSdW4gdGhlIGZvcm1hdHRlciBvbiBmaWxlcyBjaGFuZ2VkIHNpbmNlIHRoZSBwcm92aWRlZCBzaGEvcmVmJyxcbiAgICAgIChhcmdzKSA9PiBhcmdzLnBvc2l0aW9uYWwoJ3NoYU9yUmVmJywge3R5cGU6ICdzdHJpbmcnfSksXG4gICAgICBhc3luYyAoe3NoYU9yUmVmLCBjaGVja30pID0+IHtcbiAgICAgICAgY29uc3QgZ2l0ID0gR2l0Q2xpZW50LmdldCgpO1xuICAgICAgICBjb25zdCBzaGEgPSBzaGFPclJlZiB8fCBnaXQubWFpbkJyYW5jaE5hbWU7XG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvbkNtZCA9IGNoZWNrID8gY2hlY2tGaWxlcyA6IGZvcm1hdEZpbGVzO1xuICAgICAgICBjb25zdCBhbGxDaGFuZ2VkRmlsZXNTaW5jZSA9IGdpdC5hbGxDaGFuZ2VzRmlsZXNTaW5jZShzaGEpO1xuICAgICAgICBwcm9jZXNzLmV4aXRDb2RlID0gYXdhaXQgZXhlY3V0aW9uQ21kKGFsbENoYW5nZWRGaWxlc1NpbmNlKTtcbiAgICAgIH0sXG4gICAgKVxuICAgIC5jb21tYW5kKFxuICAgICAgJ3N0YWdlZCcsXG4gICAgICAnUnVuIHRoZSBmb3JtYXR0ZXIgb24gYWxsIHN0YWdlZCBmaWxlcycsXG4gICAgICAoYXJncykgPT4gYXJncyxcbiAgICAgIGFzeW5jICh7Y2hlY2t9KSA9PiB7XG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvbkNtZCA9IGNoZWNrID8gY2hlY2tGaWxlcyA6IGZvcm1hdEZpbGVzO1xuICAgICAgICBjb25zdCBhbGxTdGFnZWRGaWxlcyA9IEdpdENsaWVudC5nZXQoKS5hbGxTdGFnZWRGaWxlcygpO1xuICAgICAgICBwcm9jZXNzLmV4aXRDb2RlID0gYXdhaXQgZXhlY3V0aW9uQ21kKGFsbFN0YWdlZEZpbGVzKTtcbiAgICAgICAgaWYgKCFjaGVjayAmJiBwcm9jZXNzLmV4aXRDb2RlID09PSAwKSB7XG4gICAgICAgICAgR2l0Q2xpZW50LmdldCgpLnJ1bkdyYWNlZnVsKFsnYWRkJywgLi4uYWxsU3RhZ2VkRmlsZXNdKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApXG4gICAgLmNvbW1hbmQoXG4gICAgICAnZmlsZXMgPGZpbGVzLi4+JyxcbiAgICAgICdSdW4gdGhlIGZvcm1hdHRlciBvbiBwcm92aWRlZCBmaWxlcycsXG4gICAgICAoYXJncykgPT4gYXJncy5wb3NpdGlvbmFsKCdmaWxlcycsIHthcnJheTogdHJ1ZSwgdHlwZTogJ3N0cmluZyd9KSxcbiAgICAgIGFzeW5jICh7Y2hlY2ssIGZpbGVzfSkgPT4ge1xuICAgICAgICBjb25zdCBleGVjdXRpb25DbWQgPSBjaGVjayA/IGNoZWNrRmlsZXMgOiBmb3JtYXRGaWxlcztcbiAgICAgICAgcHJvY2Vzcy5leGl0Q29kZSA9IGF3YWl0IGV4ZWN1dGlvbkNtZChmaWxlcyEpO1xuICAgICAgfSxcbiAgICApO1xufVxuIl19