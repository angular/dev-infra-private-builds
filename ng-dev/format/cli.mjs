"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildFormatParser = void 0;
const git_client_1 = require("../utils/git/git-client");
const format_1 = require("./format");
/** Build the parser for the format commands. */
function buildFormatParser(localYargs) {
    return localYargs
        .help()
        .strict()
        .demandCommand()
        .option('check', {
        type: 'boolean',
        default: process.env['CI'] ? true : false,
        description: 'Run the formatter to check formatting rather than updating code format',
    })
        .command('all', 'Run the formatter on all files in the repository', (args) => args, async ({ check }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allFiles = git_client_1.GitClient.get().allFiles();
        process.exitCode = await executionCmd(allFiles);
    })
        .command('changed [shaOrRef]', 'Run the formatter on files changed since the provided sha/ref', (args) => args.positional('shaOrRef', { type: 'string' }), async ({ shaOrRef, check }) => {
        const git = git_client_1.GitClient.get();
        const sha = shaOrRef || git.mainBranchName;
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allChangedFilesSince = git.allChangesFilesSince(sha);
        process.exitCode = await executionCmd(allChangedFilesSince);
    })
        .command('staged', 'Run the formatter on all staged files', (args) => args, async ({ check }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allStagedFiles = git_client_1.GitClient.get().allStagedFiles();
        process.exitCode = await executionCmd(allStagedFiles);
    })
        .command('files <files..>', 'Run the formatter on provided files', (args) => args.positional('files', { array: true, type: 'string' }), async ({ check, files }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        process.exitCode = await executionCmd(files);
    });
}
exports.buildFormatParser = buildFormatParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmctZGV2L2Zvcm1hdC9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsd0RBQWtEO0FBRWxELHFDQUFpRDtBQUVqRCxnREFBZ0Q7QUFDaEQsU0FBZ0IsaUJBQWlCLENBQUMsVUFBc0I7SUFDdEQsT0FBTyxVQUFVO1NBQ2QsSUFBSSxFQUFFO1NBQ04sTUFBTSxFQUFFO1NBQ1IsYUFBYSxFQUFFO1NBQ2YsTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUNmLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztRQUN6QyxXQUFXLEVBQUUsd0VBQXdFO0tBQ3RGLENBQUM7U0FDRCxPQUFPLENBQ04sS0FBSyxFQUNMLGtEQUFrRCxFQUNsRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUNkLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUU7UUFDaEIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQkFBVSxDQUFDLENBQUMsQ0FBQyxvQkFBVyxDQUFDO1FBQ3RELE1BQU0sUUFBUSxHQUFHLHNCQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQ0Y7U0FDQSxPQUFPLENBQ04sb0JBQW9CLEVBQ3BCLCtEQUErRCxFQUMvRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDdkQsS0FBSyxFQUFFLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUU7UUFDMUIsTUFBTSxHQUFHLEdBQUcsc0JBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM1QixNQUFNLEdBQUcsR0FBRyxRQUFRLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQztRQUMzQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFVLENBQUMsQ0FBQyxDQUFDLG9CQUFXLENBQUM7UUFDdEQsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FDRjtTQUNBLE9BQU8sQ0FDTixRQUFRLEVBQ1IsdUNBQXVDLEVBQ3ZDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQ2QsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRTtRQUNoQixNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFVLENBQUMsQ0FBQyxDQUFDLG9CQUFXLENBQUM7UUFDdEQsTUFBTSxjQUFjLEdBQUcsc0JBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN4RCxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FDRjtTQUNBLE9BQU8sQ0FDTixpQkFBaUIsRUFDakIscUNBQXFDLEVBQ3JDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBQyxDQUFDLEVBQ2pFLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUMsRUFBRSxFQUFFO1FBQ3ZCLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsbUJBQVUsQ0FBQyxDQUFDLENBQUMsb0JBQVcsQ0FBQztRQUN0RCxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sWUFBWSxDQUFDLEtBQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FDRixDQUFDO0FBQ04sQ0FBQztBQW5ERCw4Q0FtREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCAqIGFzIHlhcmdzIGZyb20gJ3lhcmdzJztcbmltcG9ydCB7R2l0Q2xpZW50fSBmcm9tICcuLi91dGlscy9naXQvZ2l0LWNsaWVudCc7XG5cbmltcG9ydCB7Y2hlY2tGaWxlcywgZm9ybWF0RmlsZXN9IGZyb20gJy4vZm9ybWF0JztcblxuLyoqIEJ1aWxkIHRoZSBwYXJzZXIgZm9yIHRoZSBmb3JtYXQgY29tbWFuZHMuICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRGb3JtYXRQYXJzZXIobG9jYWxZYXJnczogeWFyZ3MuQXJndikge1xuICByZXR1cm4gbG9jYWxZYXJnc1xuICAgIC5oZWxwKClcbiAgICAuc3RyaWN0KClcbiAgICAuZGVtYW5kQ29tbWFuZCgpXG4gICAgLm9wdGlvbignY2hlY2snLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBkZWZhdWx0OiBwcm9jZXNzLmVudlsnQ0knXSA/IHRydWUgOiBmYWxzZSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnUnVuIHRoZSBmb3JtYXR0ZXIgdG8gY2hlY2sgZm9ybWF0dGluZyByYXRoZXIgdGhhbiB1cGRhdGluZyBjb2RlIGZvcm1hdCcsXG4gICAgfSlcbiAgICAuY29tbWFuZChcbiAgICAgICdhbGwnLFxuICAgICAgJ1J1biB0aGUgZm9ybWF0dGVyIG9uIGFsbCBmaWxlcyBpbiB0aGUgcmVwb3NpdG9yeScsXG4gICAgICAoYXJncykgPT4gYXJncyxcbiAgICAgIGFzeW5jICh7Y2hlY2t9KSA9PiB7XG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvbkNtZCA9IGNoZWNrID8gY2hlY2tGaWxlcyA6IGZvcm1hdEZpbGVzO1xuICAgICAgICBjb25zdCBhbGxGaWxlcyA9IEdpdENsaWVudC5nZXQoKS5hbGxGaWxlcygpO1xuICAgICAgICBwcm9jZXNzLmV4aXRDb2RlID0gYXdhaXQgZXhlY3V0aW9uQ21kKGFsbEZpbGVzKTtcbiAgICAgIH0sXG4gICAgKVxuICAgIC5jb21tYW5kKFxuICAgICAgJ2NoYW5nZWQgW3NoYU9yUmVmXScsXG4gICAgICAnUnVuIHRoZSBmb3JtYXR0ZXIgb24gZmlsZXMgY2hhbmdlZCBzaW5jZSB0aGUgcHJvdmlkZWQgc2hhL3JlZicsXG4gICAgICAoYXJncykgPT4gYXJncy5wb3NpdGlvbmFsKCdzaGFPclJlZicsIHt0eXBlOiAnc3RyaW5nJ30pLFxuICAgICAgYXN5bmMgKHtzaGFPclJlZiwgY2hlY2t9KSA9PiB7XG4gICAgICAgIGNvbnN0IGdpdCA9IEdpdENsaWVudC5nZXQoKTtcbiAgICAgICAgY29uc3Qgc2hhID0gc2hhT3JSZWYgfHwgZ2l0Lm1haW5CcmFuY2hOYW1lO1xuICAgICAgICBjb25zdCBleGVjdXRpb25DbWQgPSBjaGVjayA/IGNoZWNrRmlsZXMgOiBmb3JtYXRGaWxlcztcbiAgICAgICAgY29uc3QgYWxsQ2hhbmdlZEZpbGVzU2luY2UgPSBnaXQuYWxsQ2hhbmdlc0ZpbGVzU2luY2Uoc2hhKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0Q29kZSA9IGF3YWl0IGV4ZWN1dGlvbkNtZChhbGxDaGFuZ2VkRmlsZXNTaW5jZSk7XG4gICAgICB9LFxuICAgIClcbiAgICAuY29tbWFuZChcbiAgICAgICdzdGFnZWQnLFxuICAgICAgJ1J1biB0aGUgZm9ybWF0dGVyIG9uIGFsbCBzdGFnZWQgZmlsZXMnLFxuICAgICAgKGFyZ3MpID0+IGFyZ3MsXG4gICAgICBhc3luYyAoe2NoZWNrfSkgPT4ge1xuICAgICAgICBjb25zdCBleGVjdXRpb25DbWQgPSBjaGVjayA/IGNoZWNrRmlsZXMgOiBmb3JtYXRGaWxlcztcbiAgICAgICAgY29uc3QgYWxsU3RhZ2VkRmlsZXMgPSBHaXRDbGllbnQuZ2V0KCkuYWxsU3RhZ2VkRmlsZXMoKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0Q29kZSA9IGF3YWl0IGV4ZWN1dGlvbkNtZChhbGxTdGFnZWRGaWxlcyk7XG4gICAgICB9LFxuICAgIClcbiAgICAuY29tbWFuZChcbiAgICAgICdmaWxlcyA8ZmlsZXMuLj4nLFxuICAgICAgJ1J1biB0aGUgZm9ybWF0dGVyIG9uIHByb3ZpZGVkIGZpbGVzJyxcbiAgICAgIChhcmdzKSA9PiBhcmdzLnBvc2l0aW9uYWwoJ2ZpbGVzJywge2FycmF5OiB0cnVlLCB0eXBlOiAnc3RyaW5nJ30pLFxuICAgICAgYXN5bmMgKHtjaGVjaywgZmlsZXN9KSA9PiB7XG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvbkNtZCA9IGNoZWNrID8gY2hlY2tGaWxlcyA6IGZvcm1hdEZpbGVzO1xuICAgICAgICBwcm9jZXNzLmV4aXRDb2RlID0gYXdhaXQgZXhlY3V0aW9uQ21kKGZpbGVzISk7XG4gICAgICB9LFxuICAgICk7XG59XG4iXX0=