"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReleaseInfoCommandModule = void 0;
const git_client_1 = require("../../utils/git/git-client");
const index_1 = require("../config/index");
const active_release_trains_1 = require("../versioning/active-release-trains");
const print_active_trains_1 = require("../versioning/print-active-trains");
const versioning_1 = require("../versioning");
const config_1 = require("../../utils/config");
/** Yargs command builder for the `ng-dev release info` command. */
function builder(argv) {
    return argv.option('json', {
        type: 'boolean',
        description: 'Whether information should be written as JSON to stdout.',
        default: false,
    });
}
/** Yargs command handler for printing release information. */
async function handler(argv) {
    const config = (0, config_1.getConfig)();
    (0, index_1.assertValidReleaseConfig)(config);
    // If JSON output is requested, print the information as JSON to stdout.
    if (argv.json) {
        process.stdout.write(JSON.stringify(config.release, null, 2));
        return;
    }
    const git = git_client_1.GitClient.get();
    const nextBranchName = (0, versioning_1.getNextBranchName)(git.config.github);
    const repo = { api: git.github, ...git.remoteConfig, nextBranchName };
    const releaseTrains = await (0, active_release_trains_1.fetchActiveReleaseTrains)(repo);
    // Print the active release trains.
    await (0, print_active_trains_1.printActiveReleaseTrains)(releaseTrains, config.release);
}
/** CLI command module for retrieving release information. */
exports.ReleaseInfoCommandModule = {
    builder,
    handler,
    command: 'info',
    describe: 'Prints information for the current release state.',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvaW5mby9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBSUgsMkRBQXFEO0FBQ3JELDJDQUFxRTtBQUNyRSwrRUFBNkU7QUFDN0UsMkVBQTJFO0FBQzNFLDhDQUFvRTtBQUNwRSwrQ0FBNkM7QUFlN0MsbUVBQW1FO0FBQ25FLFNBQVMsT0FBTyxDQUFDLElBQVU7SUFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUN6QixJQUFJLEVBQUUsU0FBUztRQUNmLFdBQVcsRUFBRSwwREFBMEQ7UUFDdkUsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsOERBQThEO0FBQzlELEtBQUssVUFBVSxPQUFPLENBQUMsSUFBbUM7SUFDeEQsTUFBTSxNQUFNLEdBQUcsSUFBQSxrQkFBUyxHQUFFLENBQUM7SUFDM0IsSUFBQSxnQ0FBd0IsRUFBQyxNQUFNLENBQUMsQ0FBQztJQUVqQyx3RUFBd0U7SUFDeEUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ2IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBd0IsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRixPQUFPO0tBQ1I7SUFFRCxNQUFNLEdBQUcsR0FBRyxzQkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzVCLE1BQU0sY0FBYyxHQUFHLElBQUEsOEJBQWlCLEVBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxNQUFNLElBQUksR0FBdUIsRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxZQUFZLEVBQUUsY0FBYyxFQUFDLENBQUM7SUFDeEYsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFBLGdEQUF3QixFQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNELG1DQUFtQztJQUNuQyxNQUFNLElBQUEsOENBQXdCLEVBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRUQsNkRBQTZEO0FBQ2hELFFBQUEsd0JBQXdCLEdBQTBDO0lBQzdFLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTyxFQUFFLE1BQU07SUFDZixRQUFRLEVBQUUsbURBQW1EO0NBQzlELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtBcmd1bWVudHMsIEFyZ3YsIENvbW1hbmRNb2R1bGV9IGZyb20gJ3lhcmdzJztcblxuaW1wb3J0IHtHaXRDbGllbnR9IGZyb20gJy4uLy4uL3V0aWxzL2dpdC9naXQtY2xpZW50JztcbmltcG9ydCB7YXNzZXJ0VmFsaWRSZWxlYXNlQ29uZmlnLCBOcG1QYWNrYWdlfSBmcm9tICcuLi9jb25maWcvaW5kZXgnO1xuaW1wb3J0IHtmZXRjaEFjdGl2ZVJlbGVhc2VUcmFpbnN9IGZyb20gJy4uL3ZlcnNpb25pbmcvYWN0aXZlLXJlbGVhc2UtdHJhaW5zJztcbmltcG9ydCB7cHJpbnRBY3RpdmVSZWxlYXNlVHJhaW5zfSBmcm9tICcuLi92ZXJzaW9uaW5nL3ByaW50LWFjdGl2ZS10cmFpbnMnO1xuaW1wb3J0IHtnZXROZXh0QnJhbmNoTmFtZSwgUmVsZWFzZVJlcG9XaXRoQXBpfSBmcm9tICcuLi92ZXJzaW9uaW5nJztcbmltcG9ydCB7Z2V0Q29uZmlnfSBmcm9tICcuLi8uLi91dGlscy9jb25maWcnO1xuXG4vKipcbiAqIFR5cGUgZGVzY3JpYmluZyB0aGUgSlNPTiBvdXRwdXQgb2YgdGhpcyBjb21tYW5kLlxuICpcbiAqIEBpbXBvcnRhbnQgV2hlbiBjaGFuZ2luZyB0aGlzLCBtYWtlIHN1cmUgdGhlIHJlbGVhc2UgYWN0aW9uXG4gKiAgIGludm9jYXRpb24gaXMgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5leHBvcnQgdHlwZSBSZWxlYXNlSW5mb0pzb25TdGRvdXQgPSB7bnBtUGFja2FnZXM6IE5wbVBhY2thZ2VbXX07XG5cbi8qKiBDb21tYW5kIGxpbmUgb3B0aW9ucyBmb3IgcHJpbnRpbmcgcmVsZWFzZSBpbmZvcm1hdGlvbi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVsZWFzZUluZm9PcHRpb25zIHtcbiAganNvbjogYm9vbGVhbjtcbn1cblxuLyoqIFlhcmdzIGNvbW1hbmQgYnVpbGRlciBmb3IgdGhlIGBuZy1kZXYgcmVsZWFzZSBpbmZvYCBjb21tYW5kLiAqL1xuZnVuY3Rpb24gYnVpbGRlcihhcmd2OiBBcmd2KTogQXJndjxSZWxlYXNlSW5mb09wdGlvbnM+IHtcbiAgcmV0dXJuIGFyZ3Yub3B0aW9uKCdqc29uJywge1xuICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICBkZXNjcmlwdGlvbjogJ1doZXRoZXIgaW5mb3JtYXRpb24gc2hvdWxkIGJlIHdyaXR0ZW4gYXMgSlNPTiB0byBzdGRvdXQuJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSk7XG59XG5cbi8qKiBZYXJncyBjb21tYW5kIGhhbmRsZXIgZm9yIHByaW50aW5nIHJlbGVhc2UgaW5mb3JtYXRpb24uICovXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVyKGFyZ3Y6IEFyZ3VtZW50czxSZWxlYXNlSW5mb09wdGlvbnM+KSB7XG4gIGNvbnN0IGNvbmZpZyA9IGdldENvbmZpZygpO1xuICBhc3NlcnRWYWxpZFJlbGVhc2VDb25maWcoY29uZmlnKTtcblxuICAvLyBJZiBKU09OIG91dHB1dCBpcyByZXF1ZXN0ZWQsIHByaW50IHRoZSBpbmZvcm1hdGlvbiBhcyBKU09OIHRvIHN0ZG91dC5cbiAgaWYgKGFyZ3YuanNvbikge1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKEpTT04uc3RyaW5naWZ5KDxSZWxlYXNlSW5mb0pzb25TdGRvdXQ+Y29uZmlnLnJlbGVhc2UsIG51bGwsIDIpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBnaXQgPSBHaXRDbGllbnQuZ2V0KCk7XG4gIGNvbnN0IG5leHRCcmFuY2hOYW1lID0gZ2V0TmV4dEJyYW5jaE5hbWUoZ2l0LmNvbmZpZy5naXRodWIpO1xuICBjb25zdCByZXBvOiBSZWxlYXNlUmVwb1dpdGhBcGkgPSB7YXBpOiBnaXQuZ2l0aHViLCAuLi5naXQucmVtb3RlQ29uZmlnLCBuZXh0QnJhbmNoTmFtZX07XG4gIGNvbnN0IHJlbGVhc2VUcmFpbnMgPSBhd2FpdCBmZXRjaEFjdGl2ZVJlbGVhc2VUcmFpbnMocmVwbyk7XG5cbiAgLy8gUHJpbnQgdGhlIGFjdGl2ZSByZWxlYXNlIHRyYWlucy5cbiAgYXdhaXQgcHJpbnRBY3RpdmVSZWxlYXNlVHJhaW5zKHJlbGVhc2VUcmFpbnMsIGNvbmZpZy5yZWxlYXNlKTtcbn1cblxuLyoqIENMSSBjb21tYW5kIG1vZHVsZSBmb3IgcmV0cmlldmluZyByZWxlYXNlIGluZm9ybWF0aW9uLiAqL1xuZXhwb3J0IGNvbnN0IFJlbGVhc2VJbmZvQ29tbWFuZE1vZHVsZTogQ29tbWFuZE1vZHVsZTx7fSwgUmVsZWFzZUluZm9PcHRpb25zPiA9IHtcbiAgYnVpbGRlcixcbiAgaGFuZGxlcixcbiAgY29tbWFuZDogJ2luZm8nLFxuICBkZXNjcmliZTogJ1ByaW50cyBpbmZvcm1hdGlvbiBmb3IgdGhlIGN1cnJlbnQgcmVsZWFzZSBzdGF0ZS4nLFxufTtcbiJdfQ==