"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeNewPrereleaseVersionForNext = void 0;
const semver_1 = require("../../utils/semver");
const npm_registry_1 = require("./npm-registry");
/** Computes the new pre-release version for the next release-train. */
async function computeNewPrereleaseVersionForNext(active, config) {
    const { version: nextVersion } = active.next;
    const isNextPublishedToNpm = await npm_registry_1.isVersionPublishedToNpm(nextVersion, config);
    // Special-case where the version in the `next` release-train is not published yet. This
    // happens when we recently branched off for feature-freeze. We already bump the version to
    // the next minor or major, but do not publish immediately. Cutting a release immediately would
    // be not helpful as there are no other changes than in the feature-freeze branch. If we happen
    // to detect this case, we stage the release as usual but do not increment the version.
    if (isNextPublishedToNpm) {
        return semver_1.semverInc(nextVersion, 'prerelease');
    }
    else {
        return nextVersion;
    }
}
exports.computeNewPrereleaseVersionForNext = computeNewPrereleaseVersionForNext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV4dC1wcmVyZWxlYXNlLXZlcnNpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcmVsZWFzZS92ZXJzaW9uaW5nL25leHQtcHJlcmVsZWFzZS12ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUlILCtDQUE2QztBQUk3QyxpREFBdUQ7QUFFdkQsdUVBQXVFO0FBQ2hFLEtBQUssVUFBVSxrQ0FBa0MsQ0FDdEQsTUFBMkIsRUFDM0IsTUFBcUI7SUFFckIsTUFBTSxFQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzNDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxzQ0FBdUIsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEYsd0ZBQXdGO0lBQ3hGLDJGQUEyRjtJQUMzRiwrRkFBK0Y7SUFDL0YsK0ZBQStGO0lBQy9GLHVGQUF1RjtJQUN2RixJQUFJLG9CQUFvQixFQUFFO1FBQ3hCLE9BQU8sa0JBQVMsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDN0M7U0FBTTtRQUNMLE9BQU8sV0FBVyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQztBQWhCRCxnRkFnQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0ICogYXMgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCB7c2VtdmVySW5jfSBmcm9tICcuLi8uLi91dGlscy9zZW12ZXInO1xuaW1wb3J0IHtSZWxlYXNlQ29uZmlnfSBmcm9tICcuLi9jb25maWcvaW5kZXgnO1xuXG5pbXBvcnQge0FjdGl2ZVJlbGVhc2VUcmFpbnN9IGZyb20gJy4vYWN0aXZlLXJlbGVhc2UtdHJhaW5zJztcbmltcG9ydCB7aXNWZXJzaW9uUHVibGlzaGVkVG9OcG19IGZyb20gJy4vbnBtLXJlZ2lzdHJ5JztcblxuLyoqIENvbXB1dGVzIHRoZSBuZXcgcHJlLXJlbGVhc2UgdmVyc2lvbiBmb3IgdGhlIG5leHQgcmVsZWFzZS10cmFpbi4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wdXRlTmV3UHJlcmVsZWFzZVZlcnNpb25Gb3JOZXh0KFxuICBhY3RpdmU6IEFjdGl2ZVJlbGVhc2VUcmFpbnMsXG4gIGNvbmZpZzogUmVsZWFzZUNvbmZpZyxcbik6IFByb21pc2U8c2VtdmVyLlNlbVZlcj4ge1xuICBjb25zdCB7dmVyc2lvbjogbmV4dFZlcnNpb259ID0gYWN0aXZlLm5leHQ7XG4gIGNvbnN0IGlzTmV4dFB1Ymxpc2hlZFRvTnBtID0gYXdhaXQgaXNWZXJzaW9uUHVibGlzaGVkVG9OcG0obmV4dFZlcnNpb24sIGNvbmZpZyk7XG4gIC8vIFNwZWNpYWwtY2FzZSB3aGVyZSB0aGUgdmVyc2lvbiBpbiB0aGUgYG5leHRgIHJlbGVhc2UtdHJhaW4gaXMgbm90IHB1Ymxpc2hlZCB5ZXQuIFRoaXNcbiAgLy8gaGFwcGVucyB3aGVuIHdlIHJlY2VudGx5IGJyYW5jaGVkIG9mZiBmb3IgZmVhdHVyZS1mcmVlemUuIFdlIGFscmVhZHkgYnVtcCB0aGUgdmVyc2lvbiB0b1xuICAvLyB0aGUgbmV4dCBtaW5vciBvciBtYWpvciwgYnV0IGRvIG5vdCBwdWJsaXNoIGltbWVkaWF0ZWx5LiBDdXR0aW5nIGEgcmVsZWFzZSBpbW1lZGlhdGVseSB3b3VsZFxuICAvLyBiZSBub3QgaGVscGZ1bCBhcyB0aGVyZSBhcmUgbm8gb3RoZXIgY2hhbmdlcyB0aGFuIGluIHRoZSBmZWF0dXJlLWZyZWV6ZSBicmFuY2guIElmIHdlIGhhcHBlblxuICAvLyB0byBkZXRlY3QgdGhpcyBjYXNlLCB3ZSBzdGFnZSB0aGUgcmVsZWFzZSBhcyB1c3VhbCBidXQgZG8gbm90IGluY3JlbWVudCB0aGUgdmVyc2lvbi5cbiAgaWYgKGlzTmV4dFB1Ymxpc2hlZFRvTnBtKSB7XG4gICAgcmV0dXJuIHNlbXZlckluYyhuZXh0VmVyc2lvbiwgJ3ByZXJlbGVhc2UnKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV4dFZlcnNpb247XG4gIH1cbn1cbiJdfQ==