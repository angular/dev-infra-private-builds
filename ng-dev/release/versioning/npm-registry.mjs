"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVersionPublishedToNpm = exports.fetchProjectNpmPackageInfo = exports._npmPackageInfoCache = void 0;
const node_fetch_1 = require("node-fetch");
/**
 * Cache for requested NPM package information. A cache is desirable as the NPM
 * registry requests are usually very large and slow.
 */
exports._npmPackageInfoCache = {};
/**
 * Fetches the NPM package representing the project. Angular repositories usually contain
 * multiple packages in a monorepo scheme, but packages dealt with as part of the release
 * tooling are released together with the same versioning and branching. This means that
 * a single package can be used as source of truth for NPM package queries.
 */
async function fetchProjectNpmPackageInfo(config) {
    const pkgName = getRepresentativeNpmPackage(config);
    return await fetchPackageInfoFromNpmRegistry(pkgName);
}
exports.fetchProjectNpmPackageInfo = fetchProjectNpmPackageInfo;
/** Gets whether the given version is published to NPM or not */
async function isVersionPublishedToNpm(version, config) {
    const { versions } = await fetchProjectNpmPackageInfo(config);
    return versions[version.format()] !== undefined;
}
exports.isVersionPublishedToNpm = isVersionPublishedToNpm;
/**
 * Gets the representative NPM package for the specified release configuration. Angular
 * repositories usually contain multiple packages in a monorepo scheme, but packages dealt with
 * as part of the release tooling are released together with the same versioning and branching.
 * This means that a single package can be used as source of truth for NPM package queries.
 */
function getRepresentativeNpmPackage(config) {
    return config.npmPackages[0];
}
/** Fetches the specified NPM package from the NPM registry. */
async function fetchPackageInfoFromNpmRegistry(pkgName) {
    if (exports._npmPackageInfoCache[pkgName] === undefined) {
        exports._npmPackageInfoCache[pkgName] = node_fetch_1.default(`https://registry.npmjs.org/${pkgName}`).then((r) => r.json());
    }
    return await exports._npmPackageInfoCache[pkgName];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLXJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvdmVyc2lvbmluZy9ucG0tcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsMkNBQStCO0FBbUIvQjs7O0dBR0c7QUFDVSxRQUFBLG9CQUFvQixHQUFpRCxFQUFFLENBQUM7QUFFckY7Ozs7O0dBS0c7QUFDSSxLQUFLLFVBQVUsMEJBQTBCLENBQUMsTUFBcUI7SUFDcEUsTUFBTSxPQUFPLEdBQUcsMkJBQTJCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEQsT0FBTyxNQUFNLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFIRCxnRUFHQztBQUVELGdFQUFnRTtBQUN6RCxLQUFLLFVBQVUsdUJBQXVCLENBQzNDLE9BQXNCLEVBQ3RCLE1BQXFCO0lBRXJCLE1BQU0sRUFBQyxRQUFRLEVBQUMsR0FBRyxNQUFNLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVELE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLFNBQVMsQ0FBQztBQUNsRCxDQUFDO0FBTkQsMERBTUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQVMsMkJBQTJCLENBQUMsTUFBcUI7SUFDeEQsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFFRCwrREFBK0Q7QUFDL0QsS0FBSyxVQUFVLCtCQUErQixDQUFDLE9BQWU7SUFDNUQsSUFBSSw0QkFBb0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDL0MsNEJBQW9CLENBQUMsT0FBTyxDQUFDLEdBQUcsb0JBQUssQ0FBQyw4QkFBOEIsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN4RixDQUFDLENBQUMsSUFBSSxFQUFFLENBQ1QsQ0FBQztLQUNIO0lBQ0QsT0FBTyxNQUFNLDRCQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuaW1wb3J0ICogYXMgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCB7UmVsZWFzZUNvbmZpZ30gZnJvbSAnLi4vY29uZmlnL2luZGV4JztcbmltcG9ydCB7THRzTnBtRGlzdFRhZ30gZnJvbSAnLi9sb25nLXRlcm0tc3VwcG9ydCc7XG5cbi8qKiBUeXBlIGRlc2NyaWJpbmcgdGhlIHBvc3NpYmxlIE5QTSBkaXN0IHRhZ3MgdXNlZCBieSBBbmd1bGFyIHBhY2thZ2VzLiAqL1xuZXhwb3J0IHR5cGUgTnBtRGlzdFRhZyA9ICdsYXRlc3QnIHwgJ25leHQnIHwgTHRzTnBtRGlzdFRhZztcblxuLyoqIFR5cGUgZGVzY3JpYmluZyBhbiBOUE0gcGFja2FnZSBmZXRjaGVkIGZyb20gdGhlIHJlZ2lzdHJ5LiAqL1xuZXhwb3J0IGludGVyZmFjZSBOcG1QYWNrYWdlSW5mbyB7XG4gIC8qKiBNYXBzIG9mIHZlcnNpb25zIGFuZCB0aGVpciBwYWNrYWdlIEpTT04gb2JqZWN0cy4gKi9cbiAgJ3ZlcnNpb25zJzoge1tuYW1lOiBzdHJpbmddOiB1bmRlZmluZWQgfCBvYmplY3R9O1xuICAvKiogTWFwIG9mIE5QTSBkaXN0LXRhZ3MgYW5kIHRoZWlyIGNob3NlbiB2ZXJzaW9uLiAqL1xuICAnZGlzdC10YWdzJzoge1t0YWdOYW1lOiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWR9O1xuICAvKiogTWFwIG9mIHZlcnNpb25zIGFuZCB0aGVpciBJU08gcmVsZWFzZSB0aW1lLiAqL1xuICAndGltZSc6IHtbbmFtZTogc3RyaW5nXTogc3RyaW5nfTtcbn1cblxuLyoqXG4gKiBDYWNoZSBmb3IgcmVxdWVzdGVkIE5QTSBwYWNrYWdlIGluZm9ybWF0aW9uLiBBIGNhY2hlIGlzIGRlc2lyYWJsZSBhcyB0aGUgTlBNXG4gKiByZWdpc3RyeSByZXF1ZXN0cyBhcmUgdXN1YWxseSB2ZXJ5IGxhcmdlIGFuZCBzbG93LlxuICovXG5leHBvcnQgY29uc3QgX25wbVBhY2thZ2VJbmZvQ2FjaGU6IHtbcGtnTmFtZTogc3RyaW5nXTogUHJvbWlzZTxOcG1QYWNrYWdlSW5mbz59ID0ge307XG5cbi8qKlxuICogRmV0Y2hlcyB0aGUgTlBNIHBhY2thZ2UgcmVwcmVzZW50aW5nIHRoZSBwcm9qZWN0LiBBbmd1bGFyIHJlcG9zaXRvcmllcyB1c3VhbGx5IGNvbnRhaW5cbiAqIG11bHRpcGxlIHBhY2thZ2VzIGluIGEgbW9ub3JlcG8gc2NoZW1lLCBidXQgcGFja2FnZXMgZGVhbHQgd2l0aCBhcyBwYXJ0IG9mIHRoZSByZWxlYXNlXG4gKiB0b29saW5nIGFyZSByZWxlYXNlZCB0b2dldGhlciB3aXRoIHRoZSBzYW1lIHZlcnNpb25pbmcgYW5kIGJyYW5jaGluZy4gVGhpcyBtZWFucyB0aGF0XG4gKiBhIHNpbmdsZSBwYWNrYWdlIGNhbiBiZSB1c2VkIGFzIHNvdXJjZSBvZiB0cnV0aCBmb3IgTlBNIHBhY2thZ2UgcXVlcmllcy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoUHJvamVjdE5wbVBhY2thZ2VJbmZvKGNvbmZpZzogUmVsZWFzZUNvbmZpZyk6IFByb21pc2U8TnBtUGFja2FnZUluZm8+IHtcbiAgY29uc3QgcGtnTmFtZSA9IGdldFJlcHJlc2VudGF0aXZlTnBtUGFja2FnZShjb25maWcpO1xuICByZXR1cm4gYXdhaXQgZmV0Y2hQYWNrYWdlSW5mb0Zyb21OcG1SZWdpc3RyeShwa2dOYW1lKTtcbn1cblxuLyoqIEdldHMgd2hldGhlciB0aGUgZ2l2ZW4gdmVyc2lvbiBpcyBwdWJsaXNoZWQgdG8gTlBNIG9yIG5vdCAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzVmVyc2lvblB1Ymxpc2hlZFRvTnBtKFxuICB2ZXJzaW9uOiBzZW12ZXIuU2VtVmVyLFxuICBjb25maWc6IFJlbGVhc2VDb25maWcsXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3Qge3ZlcnNpb25zfSA9IGF3YWl0IGZldGNoUHJvamVjdE5wbVBhY2thZ2VJbmZvKGNvbmZpZyk7XG4gIHJldHVybiB2ZXJzaW9uc1t2ZXJzaW9uLmZvcm1hdCgpXSAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHJlcHJlc2VudGF0aXZlIE5QTSBwYWNrYWdlIGZvciB0aGUgc3BlY2lmaWVkIHJlbGVhc2UgY29uZmlndXJhdGlvbi4gQW5ndWxhclxuICogcmVwb3NpdG9yaWVzIHVzdWFsbHkgY29udGFpbiBtdWx0aXBsZSBwYWNrYWdlcyBpbiBhIG1vbm9yZXBvIHNjaGVtZSwgYnV0IHBhY2thZ2VzIGRlYWx0IHdpdGhcbiAqIGFzIHBhcnQgb2YgdGhlIHJlbGVhc2UgdG9vbGluZyBhcmUgcmVsZWFzZWQgdG9nZXRoZXIgd2l0aCB0aGUgc2FtZSB2ZXJzaW9uaW5nIGFuZCBicmFuY2hpbmcuXG4gKiBUaGlzIG1lYW5zIHRoYXQgYSBzaW5nbGUgcGFja2FnZSBjYW4gYmUgdXNlZCBhcyBzb3VyY2Ugb2YgdHJ1dGggZm9yIE5QTSBwYWNrYWdlIHF1ZXJpZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFJlcHJlc2VudGF0aXZlTnBtUGFja2FnZShjb25maWc6IFJlbGVhc2VDb25maWcpIHtcbiAgcmV0dXJuIGNvbmZpZy5ucG1QYWNrYWdlc1swXTtcbn1cblxuLyoqIEZldGNoZXMgdGhlIHNwZWNpZmllZCBOUE0gcGFja2FnZSBmcm9tIHRoZSBOUE0gcmVnaXN0cnkuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaFBhY2thZ2VJbmZvRnJvbU5wbVJlZ2lzdHJ5KHBrZ05hbWU6IHN0cmluZyk6IFByb21pc2U8TnBtUGFja2FnZUluZm8+IHtcbiAgaWYgKF9ucG1QYWNrYWdlSW5mb0NhY2hlW3BrZ05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBfbnBtUGFja2FnZUluZm9DYWNoZVtwa2dOYW1lXSA9IGZldGNoKGBodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy8ke3BrZ05hbWV9YCkudGhlbigocikgPT5cbiAgICAgIHIuanNvbigpLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IF9ucG1QYWNrYWdlSW5mb0NhY2hlW3BrZ05hbWVdO1xufVxuIl19