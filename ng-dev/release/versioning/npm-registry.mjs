"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVersionPublishedToNpm = exports.fetchProjectNpmPackageInfo = exports._npmPackageInfoCache = void 0;
const node_fetch_1 = require("node-fetch");
/**
 * Cache for requested NPM package information. A cache is desirable as the NPM
 * registry requests are usually very large and slow.
 */
exports._npmPackageInfoCache = {};
/**
 * Fetches the NPM package representing the project. Angular repositories usually contain
 * multiple packages in a monorepo scheme, but packages dealt with as part of the release
 * tooling are released together with the same versioning and branching. This means that
 * a single package can be used as source of truth for NPM package queries.
 */
async function fetchProjectNpmPackageInfo(config) {
    const pkgName = getRepresentativeNpmPackage(config);
    return await fetchPackageInfoFromNpmRegistry(pkgName);
}
exports.fetchProjectNpmPackageInfo = fetchProjectNpmPackageInfo;
/** Gets whether the given version is published to NPM or not */
async function isVersionPublishedToNpm(version, config) {
    const { versions } = await fetchProjectNpmPackageInfo(config);
    return versions[version.format()] !== undefined;
}
exports.isVersionPublishedToNpm = isVersionPublishedToNpm;
/**
 * Gets the representative NPM package for the specified release configuration. Angular
 * repositories usually contain multiple packages in a monorepo scheme, but packages dealt with
 * as part of the release tooling are released together with the same versioning and branching.
 * This means that a single package can be used as source of truth for NPM package queries.
 */
function getRepresentativeNpmPackage(config) {
    return config.npmPackages[0];
}
/** Fetches the specified NPM package from the NPM registry. */
async function fetchPackageInfoFromNpmRegistry(pkgName) {
    if (exports._npmPackageInfoCache[pkgName] === undefined) {
        exports._npmPackageInfoCache[pkgName] = (0, node_fetch_1.default)(`https://registry.npmjs.org/${pkgName}`).then((r) => r.json());
    }
    return await exports._npmPackageInfoCache[pkgName];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLXJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvdmVyc2lvbmluZy9ucG0tcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsMkNBQStCO0FBbUIvQjs7O0dBR0c7QUFDVSxRQUFBLG9CQUFvQixHQUFpRCxFQUFFLENBQUM7QUFFckY7Ozs7O0dBS0c7QUFDSSxLQUFLLFVBQVUsMEJBQTBCLENBQUMsTUFBcUI7SUFDcEUsTUFBTSxPQUFPLEdBQUcsMkJBQTJCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEQsT0FBTyxNQUFNLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFIRCxnRUFHQztBQUVELGdFQUFnRTtBQUN6RCxLQUFLLFVBQVUsdUJBQXVCLENBQzNDLE9BQXNCLEVBQ3RCLE1BQXFCO0lBRXJCLE1BQU0sRUFBQyxRQUFRLEVBQUMsR0FBRyxNQUFNLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVELE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLFNBQVMsQ0FBQztBQUNsRCxDQUFDO0FBTkQsMERBTUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQVMsMkJBQTJCLENBQUMsTUFBcUI7SUFDeEQsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFFRCwrREFBK0Q7QUFDL0QsS0FBSyxVQUFVLCtCQUErQixDQUFDLE9BQWU7SUFDNUQsSUFBSSw0QkFBb0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDL0MsNEJBQW9CLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBQSxvQkFBSyxFQUFDLDhCQUE4QixPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ3hGLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDVCxDQUFDO0tBQ0g7SUFDRCxPQUFPLE1BQU0sNEJBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgKiBhcyBzZW12ZXIgZnJvbSAnc2VtdmVyJztcblxuaW1wb3J0IHtSZWxlYXNlQ29uZmlnfSBmcm9tICcuLi9jb25maWcvaW5kZXgnO1xuaW1wb3J0IHtMdHNOcG1EaXN0VGFnfSBmcm9tICcuL2xvbmctdGVybS1zdXBwb3J0JztcblxuLyoqIFR5cGUgZGVzY3JpYmluZyB0aGUgcG9zc2libGUgTlBNIGRpc3QgdGFncyB1c2VkIGJ5IEFuZ3VsYXIgcGFja2FnZXMuICovXG5leHBvcnQgdHlwZSBOcG1EaXN0VGFnID0gJ2xhdGVzdCcgfCAnbmV4dCcgfCBMdHNOcG1EaXN0VGFnO1xuXG4vKiogVHlwZSBkZXNjcmliaW5nIGFuIE5QTSBwYWNrYWdlIGZldGNoZWQgZnJvbSB0aGUgcmVnaXN0cnkuICovXG5leHBvcnQgaW50ZXJmYWNlIE5wbVBhY2thZ2VJbmZvIHtcbiAgLyoqIE1hcHMgb2YgdmVyc2lvbnMgYW5kIHRoZWlyIHBhY2thZ2UgSlNPTiBvYmplY3RzLiAqL1xuICAndmVyc2lvbnMnOiB7W25hbWU6IHN0cmluZ106IHVuZGVmaW5lZCB8IG9iamVjdH07XG4gIC8qKiBNYXAgb2YgTlBNIGRpc3QtdGFncyBhbmQgdGhlaXIgY2hvc2VuIHZlcnNpb24uICovXG4gICdkaXN0LXRhZ3MnOiB7W3RhZ05hbWU6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZH07XG4gIC8qKiBNYXAgb2YgdmVyc2lvbnMgYW5kIHRoZWlyIElTTyByZWxlYXNlIHRpbWUuICovXG4gICd0aW1lJzoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9O1xufVxuXG4vKipcbiAqIENhY2hlIGZvciByZXF1ZXN0ZWQgTlBNIHBhY2thZ2UgaW5mb3JtYXRpb24uIEEgY2FjaGUgaXMgZGVzaXJhYmxlIGFzIHRoZSBOUE1cbiAqIHJlZ2lzdHJ5IHJlcXVlc3RzIGFyZSB1c3VhbGx5IHZlcnkgbGFyZ2UgYW5kIHNsb3cuXG4gKi9cbmV4cG9ydCBjb25zdCBfbnBtUGFja2FnZUluZm9DYWNoZToge1twa2dOYW1lOiBzdHJpbmddOiBQcm9taXNlPE5wbVBhY2thZ2VJbmZvPn0gPSB7fTtcblxuLyoqXG4gKiBGZXRjaGVzIHRoZSBOUE0gcGFja2FnZSByZXByZXNlbnRpbmcgdGhlIHByb2plY3QuIEFuZ3VsYXIgcmVwb3NpdG9yaWVzIHVzdWFsbHkgY29udGFpblxuICogbXVsdGlwbGUgcGFja2FnZXMgaW4gYSBtb25vcmVwbyBzY2hlbWUsIGJ1dCBwYWNrYWdlcyBkZWFsdCB3aXRoIGFzIHBhcnQgb2YgdGhlIHJlbGVhc2VcbiAqIHRvb2xpbmcgYXJlIHJlbGVhc2VkIHRvZ2V0aGVyIHdpdGggdGhlIHNhbWUgdmVyc2lvbmluZyBhbmQgYnJhbmNoaW5nLiBUaGlzIG1lYW5zIHRoYXRcbiAqIGEgc2luZ2xlIHBhY2thZ2UgY2FuIGJlIHVzZWQgYXMgc291cmNlIG9mIHRydXRoIGZvciBOUE0gcGFja2FnZSBxdWVyaWVzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hQcm9qZWN0TnBtUGFja2FnZUluZm8oY29uZmlnOiBSZWxlYXNlQ29uZmlnKTogUHJvbWlzZTxOcG1QYWNrYWdlSW5mbz4ge1xuICBjb25zdCBwa2dOYW1lID0gZ2V0UmVwcmVzZW50YXRpdmVOcG1QYWNrYWdlKGNvbmZpZyk7XG4gIHJldHVybiBhd2FpdCBmZXRjaFBhY2thZ2VJbmZvRnJvbU5wbVJlZ2lzdHJ5KHBrZ05hbWUpO1xufVxuXG4vKiogR2V0cyB3aGV0aGVyIHRoZSBnaXZlbiB2ZXJzaW9uIGlzIHB1Ymxpc2hlZCB0byBOUE0gb3Igbm90ICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaXNWZXJzaW9uUHVibGlzaGVkVG9OcG0oXG4gIHZlcnNpb246IHNlbXZlci5TZW1WZXIsXG4gIGNvbmZpZzogUmVsZWFzZUNvbmZpZyxcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCB7dmVyc2lvbnN9ID0gYXdhaXQgZmV0Y2hQcm9qZWN0TnBtUGFja2FnZUluZm8oY29uZmlnKTtcbiAgcmV0dXJuIHZlcnNpb25zW3ZlcnNpb24uZm9ybWF0KCldICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgcmVwcmVzZW50YXRpdmUgTlBNIHBhY2thZ2UgZm9yIHRoZSBzcGVjaWZpZWQgcmVsZWFzZSBjb25maWd1cmF0aW9uLiBBbmd1bGFyXG4gKiByZXBvc2l0b3JpZXMgdXN1YWxseSBjb250YWluIG11bHRpcGxlIHBhY2thZ2VzIGluIGEgbW9ub3JlcG8gc2NoZW1lLCBidXQgcGFja2FnZXMgZGVhbHQgd2l0aFxuICogYXMgcGFydCBvZiB0aGUgcmVsZWFzZSB0b29saW5nIGFyZSByZWxlYXNlZCB0b2dldGhlciB3aXRoIHRoZSBzYW1lIHZlcnNpb25pbmcgYW5kIGJyYW5jaGluZy5cbiAqIFRoaXMgbWVhbnMgdGhhdCBhIHNpbmdsZSBwYWNrYWdlIGNhbiBiZSB1c2VkIGFzIHNvdXJjZSBvZiB0cnV0aCBmb3IgTlBNIHBhY2thZ2UgcXVlcmllcy5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVwcmVzZW50YXRpdmVOcG1QYWNrYWdlKGNvbmZpZzogUmVsZWFzZUNvbmZpZykge1xuICByZXR1cm4gY29uZmlnLm5wbVBhY2thZ2VzWzBdO1xufVxuXG4vKiogRmV0Y2hlcyB0aGUgc3BlY2lmaWVkIE5QTSBwYWNrYWdlIGZyb20gdGhlIE5QTSByZWdpc3RyeS4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoUGFja2FnZUluZm9Gcm9tTnBtUmVnaXN0cnkocGtnTmFtZTogc3RyaW5nKTogUHJvbWlzZTxOcG1QYWNrYWdlSW5mbz4ge1xuICBpZiAoX25wbVBhY2thZ2VJbmZvQ2FjaGVbcGtnTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIF9ucG1QYWNrYWdlSW5mb0NhY2hlW3BrZ05hbWVdID0gZmV0Y2goYGh0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnLyR7cGtnTmFtZX1gKS50aGVuKChyKSA9PlxuICAgICAgci5qc29uKCksXG4gICAgKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgX25wbVBhY2thZ2VJbmZvQ2FjaGVbcGtnTmFtZV07XG59XG4iXX0=