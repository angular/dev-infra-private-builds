"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVersionPublishedToNpm = exports.fetchProjectNpmPackageInfo = exports._npmPackageInfoCache = void 0;
const node_fetch_1 = require("node-fetch");
/**
 * Cache for requested NPM package information. A cache is desirable as the NPM
 * registry requests are usually very large and slow.
 */
exports._npmPackageInfoCache = {};
/** Fetches the NPM package representing the project. */
async function fetchProjectNpmPackageInfo(config) {
    return await fetchPackageInfoFromNpmRegistry(config.representativeNpmPackage);
}
exports.fetchProjectNpmPackageInfo = fetchProjectNpmPackageInfo;
/** Gets whether the given version is published to NPM or not */
async function isVersionPublishedToNpm(version, config) {
    const { versions } = await fetchProjectNpmPackageInfo(config);
    return versions[version.format()] !== undefined;
}
exports.isVersionPublishedToNpm = isVersionPublishedToNpm;
/** Fetches the specified NPM package from the NPM registry. */
async function fetchPackageInfoFromNpmRegistry(pkgName) {
    if (exports._npmPackageInfoCache[pkgName] === undefined) {
        exports._npmPackageInfoCache[pkgName] = (0, node_fetch_1.default)(`https://registry.npmjs.org/${pkgName}`).then((r) => r.json());
    }
    return await exports._npmPackageInfoCache[pkgName];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLXJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvdmVyc2lvbmluZy9ucG0tcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsMkNBQStCO0FBbUIvQjs7O0dBR0c7QUFDVSxRQUFBLG9CQUFvQixHQUFpRCxFQUFFLENBQUM7QUFFckYsd0RBQXdEO0FBQ2pELEtBQUssVUFBVSwwQkFBMEIsQ0FBQyxNQUFxQjtJQUNwRSxPQUFPLE1BQU0sK0JBQStCLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDaEYsQ0FBQztBQUZELGdFQUVDO0FBRUQsZ0VBQWdFO0FBQ3pELEtBQUssVUFBVSx1QkFBdUIsQ0FDM0MsT0FBc0IsRUFDdEIsTUFBcUI7SUFFckIsTUFBTSxFQUFDLFFBQVEsRUFBQyxHQUFHLE1BQU0sMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ2xELENBQUM7QUFORCwwREFNQztBQUVELCtEQUErRDtBQUMvRCxLQUFLLFVBQVUsK0JBQStCLENBQUMsT0FBZTtJQUM1RCxJQUFJLDRCQUFvQixDQUFDLE9BQU8sQ0FBQyxLQUFLLFNBQVMsRUFBRTtRQUMvQyw0QkFBb0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFBLG9CQUFLLEVBQUMsOEJBQThCLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDeEYsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUNULENBQUM7S0FDSDtJQUNELE9BQU8sTUFBTSw0QkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCAqIGFzIHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5pbXBvcnQge1JlbGVhc2VDb25maWd9IGZyb20gJy4uL2NvbmZpZy9pbmRleCc7XG5pbXBvcnQge0x0c05wbURpc3RUYWd9IGZyb20gJy4vbG9uZy10ZXJtLXN1cHBvcnQnO1xuXG4vKiogVHlwZSBkZXNjcmliaW5nIHRoZSBwb3NzaWJsZSBOUE0gZGlzdCB0YWdzIHVzZWQgYnkgQW5ndWxhciBwYWNrYWdlcy4gKi9cbmV4cG9ydCB0eXBlIE5wbURpc3RUYWcgPSAnbGF0ZXN0JyB8ICduZXh0JyB8IEx0c05wbURpc3RUYWc7XG5cbi8qKiBUeXBlIGRlc2NyaWJpbmcgYW4gTlBNIHBhY2thZ2UgZmV0Y2hlZCBmcm9tIHRoZSByZWdpc3RyeS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTnBtUGFja2FnZUluZm8ge1xuICAvKiogTWFwcyBvZiB2ZXJzaW9ucyBhbmQgdGhlaXIgcGFja2FnZSBKU09OIG9iamVjdHMuICovXG4gICd2ZXJzaW9ucyc6IHtbbmFtZTogc3RyaW5nXTogdW5kZWZpbmVkIHwgb2JqZWN0fTtcbiAgLyoqIE1hcCBvZiBOUE0gZGlzdC10YWdzIGFuZCB0aGVpciBjaG9zZW4gdmVyc2lvbi4gKi9cbiAgJ2Rpc3QtdGFncyc6IHtbdGFnTmFtZTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkfTtcbiAgLyoqIE1hcCBvZiB2ZXJzaW9ucyBhbmQgdGhlaXIgSVNPIHJlbGVhc2UgdGltZS4gKi9cbiAgJ3RpbWUnOiB7W25hbWU6IHN0cmluZ106IHN0cmluZ307XG59XG5cbi8qKlxuICogQ2FjaGUgZm9yIHJlcXVlc3RlZCBOUE0gcGFja2FnZSBpbmZvcm1hdGlvbi4gQSBjYWNoZSBpcyBkZXNpcmFibGUgYXMgdGhlIE5QTVxuICogcmVnaXN0cnkgcmVxdWVzdHMgYXJlIHVzdWFsbHkgdmVyeSBsYXJnZSBhbmQgc2xvdy5cbiAqL1xuZXhwb3J0IGNvbnN0IF9ucG1QYWNrYWdlSW5mb0NhY2hlOiB7W3BrZ05hbWU6IHN0cmluZ106IFByb21pc2U8TnBtUGFja2FnZUluZm8+fSA9IHt9O1xuXG4vKiogRmV0Y2hlcyB0aGUgTlBNIHBhY2thZ2UgcmVwcmVzZW50aW5nIHRoZSBwcm9qZWN0LiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoUHJvamVjdE5wbVBhY2thZ2VJbmZvKGNvbmZpZzogUmVsZWFzZUNvbmZpZyk6IFByb21pc2U8TnBtUGFja2FnZUluZm8+IHtcbiAgcmV0dXJuIGF3YWl0IGZldGNoUGFja2FnZUluZm9Gcm9tTnBtUmVnaXN0cnkoY29uZmlnLnJlcHJlc2VudGF0aXZlTnBtUGFja2FnZSk7XG59XG5cbi8qKiBHZXRzIHdoZXRoZXIgdGhlIGdpdmVuIHZlcnNpb24gaXMgcHVibGlzaGVkIHRvIE5QTSBvciBub3QgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc1ZlcnNpb25QdWJsaXNoZWRUb05wbShcbiAgdmVyc2lvbjogc2VtdmVyLlNlbVZlcixcbiAgY29uZmlnOiBSZWxlYXNlQ29uZmlnLFxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IHt2ZXJzaW9uc30gPSBhd2FpdCBmZXRjaFByb2plY3ROcG1QYWNrYWdlSW5mbyhjb25maWcpO1xuICByZXR1cm4gdmVyc2lvbnNbdmVyc2lvbi5mb3JtYXQoKV0gIT09IHVuZGVmaW5lZDtcbn1cblxuLyoqIEZldGNoZXMgdGhlIHNwZWNpZmllZCBOUE0gcGFja2FnZSBmcm9tIHRoZSBOUE0gcmVnaXN0cnkuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaFBhY2thZ2VJbmZvRnJvbU5wbVJlZ2lzdHJ5KHBrZ05hbWU6IHN0cmluZyk6IFByb21pc2U8TnBtUGFja2FnZUluZm8+IHtcbiAgaWYgKF9ucG1QYWNrYWdlSW5mb0NhY2hlW3BrZ05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBfbnBtUGFja2FnZUluZm9DYWNoZVtwa2dOYW1lXSA9IGZldGNoKGBodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy8ke3BrZ05hbWV9YCkudGhlbigocikgPT5cbiAgICAgIHIuanNvbigpLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IF9ucG1QYWNrYWdlSW5mb0NhY2hlW3BrZ05hbWVdO1xufVxuIl19