"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBranchesForMajorVersions = exports.getVersionForVersionBranch = exports.isVersionBranch = exports.getVersionOfBranch = exports.getNextBranchName = void 0;
const semver = require("semver");
/** Regular expression that matches version-branches. */
const versionBranchNameRegex = /^(\d+)\.(\d+)\.x$/;
/**
 * Gets the name of the next branch from the Github configuration.
 *
 * Note that there is a clear separation between the main branch of the
 * upstream remote repository and the `next` release-train branch.
 */
function getNextBranchName(github) {
    return github.mainBranchName;
}
exports.getNextBranchName = getNextBranchName;
/** Gets the version of a given branch by reading the `package.json` upstream. */
async function getVersionOfBranch(repo, branchName) {
    const { data } = await repo.api.repos.getContent({
        owner: repo.owner,
        repo: repo.name,
        path: '/package.json',
        ref: branchName,
    });
    // Workaround for: https://github.com/octokit/rest.js/issues/32.
    // TODO: Remove cast once types of Octokit `getContent` are fixed.
    const content = data.content;
    if (!content) {
        throw Error(`Unable to read "package.json" file from repository.`);
    }
    const { version } = JSON.parse(Buffer.from(content, 'base64').toString());
    const parsedVersion = semver.parse(version);
    if (parsedVersion === null) {
        throw Error(`Invalid version detected in following branch: ${branchName}.`);
    }
    return parsedVersion;
}
exports.getVersionOfBranch = getVersionOfBranch;
/** Whether the given branch corresponds to a version branch. */
function isVersionBranch(branchName) {
    return versionBranchNameRegex.test(branchName);
}
exports.isVersionBranch = isVersionBranch;
/**
 * Converts a given version-branch into a SemVer version that can be used with SemVer
 * utilities. e.g. to determine semantic order, extract major digit, compare.
 *
 * For example `10.0.x` will become `10.0.0` in SemVer. The patch digit is not
 * relevant but needed for parsing. SemVer does not allow `x` as patch digit.
 */
function getVersionForVersionBranch(branchName) {
    return semver.parse(branchName.replace(versionBranchNameRegex, '$1.$2.0'));
}
exports.getVersionForVersionBranch = getVersionForVersionBranch;
/**
 * Gets the version branches for the specified major versions in descending
 * order. i.e. latest version branches first.
 */
async function getBranchesForMajorVersions(repo, majorVersions) {
    const branchData = await repo.api.paginate(repo.api.repos.listBranches, {
        owner: repo.owner,
        repo: repo.name,
        protected: true,
    });
    const branches = [];
    for (const { name } of branchData) {
        if (!isVersionBranch(name)) {
            continue;
        }
        // Convert the version-branch into a SemVer version that can be used with the
        // SemVer utilities. e.g. to determine semantic order, compare versions.
        const parsed = getVersionForVersionBranch(name);
        // Collect all version-branches that match the specified major versions.
        if (parsed !== null && majorVersions.includes(parsed.major)) {
            branches.push({ name, parsed });
        }
    }
    // Sort captured version-branches in descending order.
    return branches.sort((a, b) => semver.rcompare(a.parsed, b.parsed));
}
exports.getBranchesForMajorVersions = getBranchesForMajorVersions;
//# sourceMappingURL=data:application/json;base64,