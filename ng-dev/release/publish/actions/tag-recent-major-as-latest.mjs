"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagRecentMajorAsLatest = void 0;
const semver = require("semver");
const npm_registry_1 = require("../../versioning/npm-registry");
const actions_1 = require("../actions");
const external_commands_1 = require("../external-commands");
/**
 * Release action that tags the recently published major as latest within the NPM
 * registry. Major versions are published to the `next` NPM dist tag initially and
 * can be re-tagged to the `latest` NPM dist tag. This allows caretakers to make major
 * releases available at the same time. e.g. Framework, Tooling and Components
 * are able to publish v12 to `@latest` at the same time. This wouldn't be possible if
 * we directly publish to `@latest` because Tooling and Components needs to wait
 * for the major framework release to be available on NPM.
 * @see {CutStableAction#perform} for more details.
 */
class TagRecentMajorAsLatest extends actions_1.ReleaseAction {
    async getDescription() {
        return `Tag recently published major v${this.active.latest.version} as "next" in NPM.`;
    }
    async perform() {
        await this.checkoutUpstreamBranch(this.active.latest.branchName);
        await external_commands_1.invokeYarnInstallCommand(this.projectDir);
        await external_commands_1.invokeSetNpmDistCommand('latest', this.active.latest.version);
    }
    static async isActive({ latest }, config) {
        // If the latest release-train does currently not have a major version as version. e.g.
        // the latest branch is `10.0.x` with the version being `10.0.2`. In such cases, a major
        // has not been released recently, and this action should never become active.
        if (latest.version.minor !== 0 || latest.version.patch !== 0) {
            return false;
        }
        const packageInfo = await npm_registry_1.fetchProjectNpmPackageInfo(config);
        const npmLatestVersion = semver.parse(packageInfo['dist-tags']['latest']);
        // This action only becomes active if a major just has been released recently, but is
        // not set to the `latest` NPM dist tag in the NPM registry. Note that we only allow
        // re-tagging if the current `@latest` in NPM is the previous major version.
        return npmLatestVersion !== null && npmLatestVersion.major === latest.version.major - 1;
    }
}
exports.TagRecentMajorAsLatest = TagRecentMajorAsLatest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLXJlY2VudC1tYWpvci1hcy1sYXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcmVsZWFzZS9wdWJsaXNoL2FjdGlvbnMvdGFnLXJlY2VudC1tYWpvci1hcy1sYXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsaUNBQWlDO0FBSWpDLGdFQUF5RTtBQUN6RSx3Q0FBeUM7QUFDekMsNERBQXVGO0FBRXZGOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsc0JBQXVCLFNBQVEsdUJBQWE7SUFDOUMsS0FBSyxDQUFDLGNBQWM7UUFDM0IsT0FBTyxpQ0FBaUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxvQkFBb0IsQ0FBQztJQUN6RixDQUFDO0lBRVEsS0FBSyxDQUFDLE9BQU87UUFDcEIsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakUsTUFBTSw0Q0FBd0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEQsTUFBTSwyQ0FBdUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELE1BQU0sQ0FBVSxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUMsTUFBTSxFQUFzQixFQUFFLE1BQXFCO1FBQ2pGLHVGQUF1RjtRQUN2Rix3RkFBd0Y7UUFDeEYsOEVBQThFO1FBQzlFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtZQUM1RCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsTUFBTSxXQUFXLEdBQUcsTUFBTSx5Q0FBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDMUUscUZBQXFGO1FBQ3JGLG9GQUFvRjtRQUNwRiw0RUFBNEU7UUFDNUUsT0FBTyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksZ0JBQWdCLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUMxRixDQUFDO0NBQ0Y7QUExQkQsd0RBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCAqIGFzIHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5pbXBvcnQge1JlbGVhc2VDb25maWd9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQge0FjdGl2ZVJlbGVhc2VUcmFpbnN9IGZyb20gJy4uLy4uL3ZlcnNpb25pbmcvYWN0aXZlLXJlbGVhc2UtdHJhaW5zJztcbmltcG9ydCB7ZmV0Y2hQcm9qZWN0TnBtUGFja2FnZUluZm99IGZyb20gJy4uLy4uL3ZlcnNpb25pbmcvbnBtLXJlZ2lzdHJ5JztcbmltcG9ydCB7UmVsZWFzZUFjdGlvbn0gZnJvbSAnLi4vYWN0aW9ucyc7XG5pbXBvcnQge2ludm9rZVNldE5wbURpc3RDb21tYW5kLCBpbnZva2VZYXJuSW5zdGFsbENvbW1hbmR9IGZyb20gJy4uL2V4dGVybmFsLWNvbW1hbmRzJztcblxuLyoqXG4gKiBSZWxlYXNlIGFjdGlvbiB0aGF0IHRhZ3MgdGhlIHJlY2VudGx5IHB1Ymxpc2hlZCBtYWpvciBhcyBsYXRlc3Qgd2l0aGluIHRoZSBOUE1cbiAqIHJlZ2lzdHJ5LiBNYWpvciB2ZXJzaW9ucyBhcmUgcHVibGlzaGVkIHRvIHRoZSBgbmV4dGAgTlBNIGRpc3QgdGFnIGluaXRpYWxseSBhbmRcbiAqIGNhbiBiZSByZS10YWdnZWQgdG8gdGhlIGBsYXRlc3RgIE5QTSBkaXN0IHRhZy4gVGhpcyBhbGxvd3MgY2FyZXRha2VycyB0byBtYWtlIG1ham9yXG4gKiByZWxlYXNlcyBhdmFpbGFibGUgYXQgdGhlIHNhbWUgdGltZS4gZS5nLiBGcmFtZXdvcmssIFRvb2xpbmcgYW5kIENvbXBvbmVudHNcbiAqIGFyZSBhYmxlIHRvIHB1Ymxpc2ggdjEyIHRvIGBAbGF0ZXN0YCBhdCB0aGUgc2FtZSB0aW1lLiBUaGlzIHdvdWxkbid0IGJlIHBvc3NpYmxlIGlmXG4gKiB3ZSBkaXJlY3RseSBwdWJsaXNoIHRvIGBAbGF0ZXN0YCBiZWNhdXNlIFRvb2xpbmcgYW5kIENvbXBvbmVudHMgbmVlZHMgdG8gd2FpdFxuICogZm9yIHRoZSBtYWpvciBmcmFtZXdvcmsgcmVsZWFzZSB0byBiZSBhdmFpbGFibGUgb24gTlBNLlxuICogQHNlZSB7Q3V0U3RhYmxlQWN0aW9uI3BlcmZvcm19IGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUYWdSZWNlbnRNYWpvckFzTGF0ZXN0IGV4dGVuZHMgUmVsZWFzZUFjdGlvbiB7XG4gIG92ZXJyaWRlIGFzeW5jIGdldERlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiBgVGFnIHJlY2VudGx5IHB1Ymxpc2hlZCBtYWpvciB2JHt0aGlzLmFjdGl2ZS5sYXRlc3QudmVyc2lvbn0gYXMgXCJuZXh0XCIgaW4gTlBNLmA7XG4gIH1cblxuICBvdmVycmlkZSBhc3luYyBwZXJmb3JtKCkge1xuICAgIGF3YWl0IHRoaXMuY2hlY2tvdXRVcHN0cmVhbUJyYW5jaCh0aGlzLmFjdGl2ZS5sYXRlc3QuYnJhbmNoTmFtZSk7XG4gICAgYXdhaXQgaW52b2tlWWFybkluc3RhbGxDb21tYW5kKHRoaXMucHJvamVjdERpcik7XG4gICAgYXdhaXQgaW52b2tlU2V0TnBtRGlzdENvbW1hbmQoJ2xhdGVzdCcsIHRoaXMuYWN0aXZlLmxhdGVzdC52ZXJzaW9uKTtcbiAgfVxuXG4gIHN0YXRpYyBvdmVycmlkZSBhc3luYyBpc0FjdGl2ZSh7bGF0ZXN0fTogQWN0aXZlUmVsZWFzZVRyYWlucywgY29uZmlnOiBSZWxlYXNlQ29uZmlnKSB7XG4gICAgLy8gSWYgdGhlIGxhdGVzdCByZWxlYXNlLXRyYWluIGRvZXMgY3VycmVudGx5IG5vdCBoYXZlIGEgbWFqb3IgdmVyc2lvbiBhcyB2ZXJzaW9uLiBlLmcuXG4gICAgLy8gdGhlIGxhdGVzdCBicmFuY2ggaXMgYDEwLjAueGAgd2l0aCB0aGUgdmVyc2lvbiBiZWluZyBgMTAuMC4yYC4gSW4gc3VjaCBjYXNlcywgYSBtYWpvclxuICAgIC8vIGhhcyBub3QgYmVlbiByZWxlYXNlZCByZWNlbnRseSwgYW5kIHRoaXMgYWN0aW9uIHNob3VsZCBuZXZlciBiZWNvbWUgYWN0aXZlLlxuICAgIGlmIChsYXRlc3QudmVyc2lvbi5taW5vciAhPT0gMCB8fCBsYXRlc3QudmVyc2lvbi5wYXRjaCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHBhY2thZ2VJbmZvID0gYXdhaXQgZmV0Y2hQcm9qZWN0TnBtUGFja2FnZUluZm8oY29uZmlnKTtcbiAgICBjb25zdCBucG1MYXRlc3RWZXJzaW9uID0gc2VtdmVyLnBhcnNlKHBhY2thZ2VJbmZvWydkaXN0LXRhZ3MnXVsnbGF0ZXN0J10pO1xuICAgIC8vIFRoaXMgYWN0aW9uIG9ubHkgYmVjb21lcyBhY3RpdmUgaWYgYSBtYWpvciBqdXN0IGhhcyBiZWVuIHJlbGVhc2VkIHJlY2VudGx5LCBidXQgaXNcbiAgICAvLyBub3Qgc2V0IHRvIHRoZSBgbGF0ZXN0YCBOUE0gZGlzdCB0YWcgaW4gdGhlIE5QTSByZWdpc3RyeS4gTm90ZSB0aGF0IHdlIG9ubHkgYWxsb3dcbiAgICAvLyByZS10YWdnaW5nIGlmIHRoZSBjdXJyZW50IGBAbGF0ZXN0YCBpbiBOUE0gaXMgdGhlIHByZXZpb3VzIG1ham9yIHZlcnNpb24uXG4gICAgcmV0dXJuIG5wbUxhdGVzdFZlcnNpb24gIT09IG51bGwgJiYgbnBtTGF0ZXN0VmVyc2lvbi5tYWpvciA9PT0gbGF0ZXN0LnZlcnNpb24ubWFqb3IgLSAxO1xuICB9XG59XG4iXX0=