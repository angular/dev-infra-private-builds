"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BranchOffNextBranchBaseAction = void 0;
const semver = require("semver");
const console_1 = require("../../../utils/console");
const semver_1 = require("../../../utils/semver");
const release_notes_1 = require("../../notes/release-notes");
const next_prerelease_version_1 = require("../../versioning/next-prerelease-version");
const actions_1 = require("../actions");
const commit_message_1 = require("../commit-message");
const constants_1 = require("../constants");
/**
 * Base action that can be used to move the next release-train into the feature-freeze or
 * release-candidate phase. This means that a new version branch is created from the next
 * branch, and a new pre-release (either RC or another `next`) is cut indicating the new phase.
 */
class BranchOffNextBranchBaseAction extends actions_1.ReleaseAction {
    async getDescription() {
        const { branchName } = this.active.next;
        const newVersion = await this._computeNewVersion();
        return `Move the "${branchName}" branch into ${this.newPhaseName} phase (v${newVersion}).`;
    }
    async perform() {
        const compareVersionForReleaseNotes = await (0, next_prerelease_version_1.getReleaseNotesCompareVersionForNext)(this.active, this.config);
        const newVersion = await this._computeNewVersion();
        const newBranch = `${newVersion.major}.${newVersion.minor}.x`;
        // Branch-off the next branch into a new version branch.
        await this._createNewVersionBranchFromNext(newBranch);
        // Stage the new version for the newly created branch, and push changes to a
        // fork in order to create a staging pull request. Note that we re-use the newly
        // created branch instead of re-fetching from the upstream.
        const { pullRequest, releaseNotes } = await this.stageVersionForBranchAndCreatePullRequest(newVersion, compareVersionForReleaseNotes, newBranch);
        // Wait for the staging PR to be merged. Then build and publish the feature-freeze next
        // pre-release. Finally, cherry-pick the release notes into the next branch in combination
        // with bumping the version to the next minor too.
        await this.waitForPullRequestToBeMerged(pullRequest);
        await this.buildAndPublish(releaseNotes, newBranch, 'next');
        await this._createNextBranchUpdatePullRequest(releaseNotes, newVersion);
    }
    /** Computes the new version for the release-train being branched-off. */
    async _computeNewVersion() {
        if (this.newPhaseName === 'feature-freeze') {
            return (0, next_prerelease_version_1.computeNewPrereleaseVersionForNext)(this.active, this.config);
        }
        else {
            return (0, semver_1.semverInc)(this.active.next.version, 'prerelease', 'rc');
        }
    }
    /** Creates a new version branch from the next branch. */
    async _createNewVersionBranchFromNext(newBranch) {
        const { branchName: nextBranch } = this.active.next;
        await this.verifyPassingGithubStatus(nextBranch);
        await this.checkoutUpstreamBranch(nextBranch);
        await this.createLocalBranchFromHead(newBranch);
        await this.pushHeadToRemoteBranch(newBranch);
        (0, console_1.info)((0, console_1.green)(`  ✓   Version branch "${newBranch}" created.`));
    }
    /**
     * Creates a pull request for the next branch that bumps the version to the next
     * minor, and cherry-picks the changelog for the newly branched-off release-candidate
     * or feature-freeze version.
     */
    async _createNextBranchUpdatePullRequest(releaseNotes, newVersion) {
        const { branchName: nextBranch, version } = this.active.next;
        // We increase the version for the next branch to the next minor. The team can decide
        // later if they want next to be a major through the `Configure Next as Major` release action.
        const newNextVersion = semver.parse(`${version.major}.${version.minor + 1}.0-next.0`);
        const bumpCommitMessage = (0, commit_message_1.getCommitMessageForExceptionalNextVersionBump)(newNextVersion);
        await this.checkoutUpstreamBranch(nextBranch);
        await this.updateProjectVersion(newNextVersion);
        // Create an individual commit for the next version bump. The changelog should go into
        // a separate commit that makes it clear where the changelog is cherry-picked from.
        await this.createCommit(bumpCommitMessage, [constants_1.packageJsonPath]);
        await this.prependReleaseNotesToChangelog(releaseNotes);
        const commitMessage = (0, commit_message_1.getReleaseNoteCherryPickCommitMessage)(releaseNotes.version);
        await this.createCommit(commitMessage, [release_notes_1.changelogPath]);
        let nextPullRequestMessage = `The previous "next" release-train has moved into the ` +
            `${this.newPhaseName} phase. This PR updates the next branch to the subsequent ` +
            `release-train.\n\nAlso this PR cherry-picks the changelog for ` +
            `v${newVersion} into the ${nextBranch} branch so that the changelog is up to date.`;
        const nextUpdatePullRequest = await this.pushChangesToForkAndCreatePullRequest(nextBranch, `next-release-train-${newNextVersion}`, `Update next branch to reflect new release-train "v${newNextVersion}".`, nextPullRequestMessage);
        (0, console_1.info)((0, console_1.green)(`  ✓   Pull request for updating the "${nextBranch}" branch has been created.`));
        (0, console_1.info)((0, console_1.yellow)(`      Please ask team members to review: ${nextUpdatePullRequest.url}.`));
    }
}
exports.BranchOffNextBranchBaseAction = BranchOffNextBranchBaseAction;
//# sourceMappingURL=data:application/json;base64,