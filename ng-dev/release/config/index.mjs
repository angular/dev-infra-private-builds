"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReleaseConfig = void 0;
const config_1 = require("../../utils/config");
/** Retrieve and validate the config as `ReleaseConfig`. */
function getReleaseConfig(config = config_1.getConfig()) {
    // List of errors encountered validating the config.
    const errors = [];
    if (config.release === undefined) {
        errors.push(`No configuration defined for "release"`);
    }
    if (config.release?.npmPackages === undefined) {
        errors.push(`No "npmPackages" configured for releasing.`);
    }
    if (config.release?.buildPackages === undefined) {
        errors.push(`No "buildPackages" function configured for releasing.`);
    }
    if (config.release?.releaseNotes === undefined) {
        errors.push(`No "releaseNotes" configured for releasing.`);
    }
    config_1.assertNoErrors(errors);
    return config.release;
}
exports.getReleaseConfig = getReleaseConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcmVsZWFzZS9jb25maWcvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsK0NBQTBFO0FBMEMxRSwyREFBMkQ7QUFDM0QsU0FBZ0IsZ0JBQWdCLENBQzlCLFNBQXlDLGtCQUFTLEVBQUU7SUFFcEQsb0RBQW9EO0lBQ3BELE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUU1QixJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUN2RDtJQUNELElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxXQUFXLEtBQUssU0FBUyxFQUFFO1FBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsNENBQTRDLENBQUMsQ0FBQztLQUMzRDtJQUNELElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxhQUFhLEtBQUssU0FBUyxFQUFFO1FBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsdURBQXVELENBQUMsQ0FBQztLQUN0RTtJQUNELElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxZQUFZLEtBQUssU0FBUyxFQUFFO1FBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsNkNBQTZDLENBQUMsQ0FBQztLQUM1RDtJQUVELHVCQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkIsT0FBTyxNQUFNLENBQUMsT0FBUSxDQUFDO0FBQ3pCLENBQUM7QUFyQkQsNENBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7YXNzZXJ0Tm9FcnJvcnMsIGdldENvbmZpZywgTmdEZXZDb25maWd9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmZpZyc7XG5cbi8qKiBJbnRlcmZhY2UgZGVzY3JpYmluZyBhIGJ1aWx0IHBhY2thZ2UuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWx0UGFja2FnZSB7XG4gIC8qKiBOYW1lIG9mIHRoZSBwYWNrYWdlLiAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiBQYXRoIHRvIHRoZSBwYWNrYWdlIG91dHB1dCBkaXJlY3RvcnkuICovXG4gIG91dHB1dFBhdGg6IHN0cmluZztcbn1cblxuLyoqIENvbmZpZ3VyYXRpb24gZm9yIHN0YWdpbmcgYW5kIHB1Ymxpc2hpbmcgYSByZWxlYXNlLiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWxlYXNlQ29uZmlnIHtcbiAgLyoqIFJlZ2lzdHJ5IFVSTCB1c2VkIGZvciBwdWJsaXNoaW5nIHJlbGVhc2UgcGFja2FnZXMuIERlZmF1bHRzIHRvIHRoZSBOUE0gcmVnaXN0cnkuICovXG4gIHB1Ymxpc2hSZWdpc3RyeT86IHN0cmluZztcbiAgLyoqIExpc3Qgb2YgTlBNIHBhY2thZ2VzIHRoYXQgYXJlIHB1Ymxpc2hlZCBhcyBwYXJ0IG9mIHRoaXMgcHJvamVjdC4gKi9cbiAgbnBtUGFja2FnZXM6IHN0cmluZ1tdO1xuICAvKiogQnVpbGRzIHJlbGVhc2UgcGFja2FnZXMgYW5kIHJldHVybnMgYSBsaXN0IG9mIHBhdGhzIHBvaW50aW5nIHRvIHRoZSBvdXRwdXQuICovXG4gIGJ1aWxkUGFja2FnZXM6IChzdGFtcEZvclJlbGVhc2U/OiBib29sZWFuKSA9PiBQcm9taXNlPEJ1aWx0UGFja2FnZVtdIHwgbnVsbD47XG4gIC8qKiBUaGUgbGlzdCBvZiBnaXRodWIgbGFiZWxzIHRvIGFkZCB0byB0aGUgcmVsZWFzZSBQUnMuICovXG4gIHJlbGVhc2VQckxhYmVscz86IHN0cmluZ1tdO1xuICAvKiogQ29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgcmVsZWFzZSBub3RlcyBkdXJpbmcgcHVibGlzaGluZy4gKi9cbiAgcmVsZWFzZU5vdGVzOiBSZWxlYXNlTm90ZXNDb25maWc7XG59XG5cbi8qKiBDb25maWd1cmF0aW9uIGZvciBjcmVhdGluZyByZWxlYXNlIG5vdGVzIGR1cmluZyBwdWJsaXNoaW5nLiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWxlYXNlTm90ZXNDb25maWcge1xuICAvKiogV2hldGhlciB0byBwcm9tcHQgZm9yIGFuZCBpbmNsdWRlIGEgcmVsZWFzZSB0aXRsZSBpbiB0aGUgZ2VuZXJhdGVkIHJlbGVhc2Ugbm90ZXMuICovXG4gIHVzZVJlbGVhc2VUaXRsZT86IGJvb2xlYW47XG4gIC8qKiBMaXN0IG9mIGNvbW1pdCBzY29wZXMgdG8gZGlzY2x1ZGUgZnJvbSBnZW5lcmF0ZWQgcmVsZWFzZSBub3Rlcy4gKi9cbiAgaGlkZGVuU2NvcGVzPzogc3RyaW5nW107XG4gIC8qKlxuICAgKiBMaXN0IG9mIGNvbW1pdCBncm91cHMsIGVpdGhlciB7bnBtU2NvcGV9L3tzY29wZX0gb3Ige3Njb3BlfSwgdG8gdXNlIGZvciBvcmRlcmluZy5cbiAgICpcbiAgICogRWFjaCBncm91cCBmb3IgdGhlIHJlbGVhc2Ugbm90ZXMsIHdpbGwgYXBwZWFyIGluIHRoZSBvcmRlciBwcm92aWRlZCBpbiBncm91cE9yZGVyIGFuZCBhbnkgb3RoZXJcbiAgICogZ3JvdXBzIHdpbGwgYXBwZWFyIGFmdGVyIHRoZXNlIGdyb3Vwcywgc29ydGVkIGJ5IGBBcnJheS5zb3J0YCdzIGRlZmF1bHQgc29ydGluZyBvcmRlci5cbiAgICovXG4gIGdyb3VwT3JkZXI/OiBzdHJpbmdbXTtcbn1cblxuLyoqIENvbmZpZ3VyYXRpb24gZm9yIHJlbGVhc2VzIGluIHRoZSBkZXYtaW5mcmEgY29uZmlndXJhdGlvbi4gKi9cbmV4cG9ydCB0eXBlIERldkluZnJhUmVsZWFzZUNvbmZpZyA9IE5nRGV2Q29uZmlnPHtyZWxlYXNlOiBSZWxlYXNlQ29uZmlnfT47XG5cbi8qKiBSZXRyaWV2ZSBhbmQgdmFsaWRhdGUgdGhlIGNvbmZpZyBhcyBgUmVsZWFzZUNvbmZpZ2AuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVsZWFzZUNvbmZpZyhcbiAgY29uZmlnOiBQYXJ0aWFsPERldkluZnJhUmVsZWFzZUNvbmZpZz4gPSBnZXRDb25maWcoKSxcbik6IFJlbGVhc2VDb25maWcge1xuICAvLyBMaXN0IG9mIGVycm9ycyBlbmNvdW50ZXJlZCB2YWxpZGF0aW5nIHRoZSBjb25maWcuXG4gIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICBpZiAoY29uZmlnLnJlbGVhc2UgPT09IHVuZGVmaW5lZCkge1xuICAgIGVycm9ycy5wdXNoKGBObyBjb25maWd1cmF0aW9uIGRlZmluZWQgZm9yIFwicmVsZWFzZVwiYCk7XG4gIH1cbiAgaWYgKGNvbmZpZy5yZWxlYXNlPy5ucG1QYWNrYWdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXJyb3JzLnB1c2goYE5vIFwibnBtUGFja2FnZXNcIiBjb25maWd1cmVkIGZvciByZWxlYXNpbmcuYCk7XG4gIH1cbiAgaWYgKGNvbmZpZy5yZWxlYXNlPy5idWlsZFBhY2thZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICBlcnJvcnMucHVzaChgTm8gXCJidWlsZFBhY2thZ2VzXCIgZnVuY3Rpb24gY29uZmlndXJlZCBmb3IgcmVsZWFzaW5nLmApO1xuICB9XG4gIGlmIChjb25maWcucmVsZWFzZT8ucmVsZWFzZU5vdGVzID09PSB1bmRlZmluZWQpIHtcbiAgICBlcnJvcnMucHVzaChgTm8gXCJyZWxlYXNlTm90ZXNcIiBjb25maWd1cmVkIGZvciByZWxlYXNpbmcuYCk7XG4gIH1cblxuICBhc3NlcnROb0Vycm9ycyhlcnJvcnMpO1xuICByZXR1cm4gY29uZmlnLnJlbGVhc2UhO1xufVxuIl19