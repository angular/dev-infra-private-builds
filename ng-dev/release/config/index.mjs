"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertValidReleaseConfig = void 0;
const config_1 = require("../../utils/config");
/** Asserts that the given configuration is a valid `DevInfraReleaseConfig`. */
function assertValidReleaseConfig(config) {
    // List of errors encountered validating the config.
    const errors = [];
    if (config.release === undefined) {
        throw new config_1.ConfigValidationError('No configuration provided for `release`');
    }
    if (config.release.representativeNpmPackage === undefined) {
        errors.push(`No "representativeNpmPackage" configured for releasing.`);
    }
    if (config.release.npmPackages === undefined) {
        errors.push(`No "npmPackages" configured for releasing.`);
    }
    if (config.release.buildPackages === undefined) {
        errors.push(`No "buildPackages" function configured for releasing.`);
    }
    if (config.release.representativeNpmPackage && config.release.npmPackages) {
        const representativePkgEntry = config.release.npmPackages.find((pkg) => pkg.name === config.release?.representativeNpmPackage);
        if (representativePkgEntry === undefined) {
            errors.push(`Configured "representativeNpmPackage" (${representativePkgEntry}) does not match ` +
                `a package in "npmPackages".`);
        }
        else if (representativePkgEntry.experimental) {
            errors.push(`Configured "representativeNpmPackage" (${representativePkgEntry}) corresponds to an ` +
                `experimental package. The representative NPM package is expected to be a ` +
                `long-standing and non-experimental package of the project.`);
        }
    }
    if (errors.length) {
        throw new config_1.ConfigValidationError('Invalid `release` configuration', errors);
    }
}
exports.assertValidReleaseConfig = assertValidReleaseConfig;
//# sourceMappingURL=data:application/json;base64,