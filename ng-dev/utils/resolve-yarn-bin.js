"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getYarnPathFromNpmGlobalBinaries = exports.resolveYarnScriptForProject = exports.yarnConfigFiles = void 0;
const fs = require("fs");
const path = require("path");
const which = require("which");
const nodejs_errors_1 = require("./nodejs-errors");
const lockfile_1 = require("@yarnpkg/lockfile");
const yaml_1 = require("yaml");
const child_process_1 = require("./child-process");
const console_1 = require("./console");
/** List of Yarn configuration files and their parsing mechanisms. */
exports.yarnConfigFiles = [
    { fileName: '.yarnrc', parse: (c) => (0, lockfile_1.parse)(c).object },
    { fileName: '.yarnrc.yml', parse: (c) => (0, yaml_1.parse)(c) },
];
/**
 * Resolves Yarn for the given project directory.
 *
 * This function exists so that Yarn can be invoked from within Yarn-initiated processes.
 * Yarn uses some magical logic where it creates a temporary directory to make Yarn resolvable.
 * This temporary directory is then wired up in `process.env.PATH` and can break for example
 * when a command switches branches, causing the originally invoked Yarn checked-in file to
 * become unavailable.
 */
async function resolveYarnScriptForProject(projectDir) {
    const yarnPathFromConfig = await getYarnPathFromConfigurationIfPresent(projectDir);
    if (yarnPathFromConfig !== null) {
        return { binary: 'node', args: [yarnPathFromConfig] };
    }
    const yarnPathFromNpmBin = await getYarnPathFromNpmGlobalBinaries();
    if (yarnPathFromNpmBin !== null) {
        return { binary: yarnPathFromNpmBin, args: [] };
    }
    return { binary: 'yarn', args: [] };
}
exports.resolveYarnScriptForProject = resolveYarnScriptForProject;
/** Gets the path to the Yarn binary from the NPM global binary directory. */
async function getYarnPathFromNpmGlobalBinaries() {
    const npmGlobalBinPath = await getNpmGlobalBinPath();
    if (npmGlobalBinPath === null) {
        return null;
    }
    try {
        return await which('yarn', { path: npmGlobalBinPath });
    }
    catch (e) {
        (0, console_1.debug)('Could not find Yarn within NPM global binary directory. Error:', e);
        return null;
    }
}
exports.getYarnPathFromNpmGlobalBinaries = getYarnPathFromNpmGlobalBinaries;
/** Gets the path to the system-wide global NPM binary directory. */
async function getNpmGlobalBinPath() {
    try {
        return (await (0, child_process_1.spawn)('npm', ['bin', '--global'], { mode: 'silent' })).stdout.trim();
    }
    catch (e) {
        (0, console_1.debug)('Could not determine NPM global binary directory. Error:', e);
        return null;
    }
}
/** Gets the Yarn path from the Yarn configuration if present. */
async function getYarnPathFromConfigurationIfPresent(projectDir) {
    const yarnRc = await findAndParseYarnConfiguration(projectDir);
    if (yarnRc === null) {
        return null;
    }
    const yarnPath = yarnRc['yarn-path'] ?? yarnRc['yarnPath'];
    if (yarnPath === undefined) {
        return null;
    }
    return path.resolve(projectDir, yarnPath);
}
/** Finds and parses the Yarn configuration file for the given project. */
async function findAndParseYarnConfiguration(projectDir) {
    const files = await Promise.all(exports.yarnConfigFiles.map(async (entry) => ({
        entry,
        content: await readFileGracefully(path.join(projectDir, entry.fileName)),
    })));
    const config = files.find((entry) => entry.content !== null);
    if (config === undefined) {
        return null;
    }
    try {
        return config.entry.parse(config.content);
    }
    catch (e) {
        (0, console_1.debug)(`Could not parse determined Yarn configuration file (${config.entry.fileName}).`);
        (0, console_1.debug)(`Error:`, e);
        return null;
    }
}
/**
 * Reads the specified file gracefully.
 * @returns The file contents. Null if the file does not exist.
 */
async function readFileGracefully(filePath) {
    try {
        return await fs.promises.readFile(filePath, 'utf8');
    }
    catch (error) {
        if ((0, nodejs_errors_1.isNodeJSWrappedError)(error, Error) && error.code === 'ENOENT') {
            return null;
        }
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,