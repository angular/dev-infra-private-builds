"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getListCommitsInBranchUrl = exports.getRepositoryGitUrl = exports.addTokenToGitHttpsUrl = exports.GITHUB_TOKEN_GENERATE_URL = exports.GITHUB_TOKEN_SETTINGS_URL = void 0;
const url_1 = require("url");
/** URL to the Github page where personal access tokens can be managed. */
exports.GITHUB_TOKEN_SETTINGS_URL = 'https://github.com/settings/tokens';
/** URL to the Github page where personal access tokens can be generated. */
exports.GITHUB_TOKEN_GENERATE_URL = 'https://github.com/settings/tokens/new';
/** Adds the provided token to the given Github HTTPs remote url. */
function addTokenToGitHttpsUrl(githubHttpsUrl, token) {
    const url = new url_1.URL(githubHttpsUrl);
    url.username = token;
    return url.href;
}
exports.addTokenToGitHttpsUrl = addTokenToGitHttpsUrl;
/** Gets the repository Git URL for the given github config. */
function getRepositoryGitUrl(config, githubToken) {
    if (config.useSsh) {
        return `git@github.com:${config.owner}/${config.name}.git`;
    }
    const baseHttpUrl = `https://github.com/${config.owner}/${config.name}.git`;
    if (githubToken !== undefined) {
        return addTokenToGitHttpsUrl(baseHttpUrl, githubToken);
    }
    return baseHttpUrl;
}
exports.getRepositoryGitUrl = getRepositoryGitUrl;
/** Gets a Github URL that refers to a list of recent commits within a specified branch. */
function getListCommitsInBranchUrl({ remoteParams }, branchName) {
    return `https://github.com/${remoteParams.owner}/${remoteParams.repo}/commits/${branchName}`;
}
exports.getListCommitsInBranchUrl = getListCommitsInBranchUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLXVybHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvdXRpbHMvZ2l0L2dpdGh1Yi11cmxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUVILDZCQUF3QjtBQUt4QiwwRUFBMEU7QUFDN0QsUUFBQSx5QkFBeUIsR0FBRyxvQ0FBb0MsQ0FBQztBQUU5RSw0RUFBNEU7QUFDL0QsUUFBQSx5QkFBeUIsR0FBRyx3Q0FBd0MsQ0FBQztBQUVsRixvRUFBb0U7QUFDcEUsU0FBZ0IscUJBQXFCLENBQUMsY0FBc0IsRUFBRSxLQUFhO0lBQ3pFLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3BDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQztBQUNsQixDQUFDO0FBSkQsc0RBSUM7QUFFRCwrREFBK0Q7QUFDL0QsU0FBZ0IsbUJBQW1CLENBQ2pDLE1BQXVELEVBQ3ZELFdBQW9CO0lBRXBCLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUNqQixPQUFPLGtCQUFrQixNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQztLQUM1RDtJQUNELE1BQU0sV0FBVyxHQUFHLHNCQUFzQixNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQztJQUM1RSxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7UUFDN0IsT0FBTyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDeEQ7SUFDRCxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBWkQsa0RBWUM7QUFFRCwyRkFBMkY7QUFDM0YsU0FBZ0IseUJBQXlCLENBQUMsRUFBQyxZQUFZLEVBQVksRUFBRSxVQUFrQjtJQUNyRixPQUFPLHNCQUFzQixZQUFZLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQyxJQUFJLFlBQVksVUFBVSxFQUFFLENBQUM7QUFDL0YsQ0FBQztBQUZELDhEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7VVJMfSBmcm9tICd1cmwnO1xuXG5pbXBvcnQge0dpdGh1YkNvbmZpZ30gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7R2l0Q2xpZW50fSBmcm9tICcuL2dpdC1jbGllbnQnO1xuXG4vKiogVVJMIHRvIHRoZSBHaXRodWIgcGFnZSB3aGVyZSBwZXJzb25hbCBhY2Nlc3MgdG9rZW5zIGNhbiBiZSBtYW5hZ2VkLiAqL1xuZXhwb3J0IGNvbnN0IEdJVEhVQl9UT0tFTl9TRVRUSU5HU19VUkwgPSAnaHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucyc7XG5cbi8qKiBVUkwgdG8gdGhlIEdpdGh1YiBwYWdlIHdoZXJlIHBlcnNvbmFsIGFjY2VzcyB0b2tlbnMgY2FuIGJlIGdlbmVyYXRlZC4gKi9cbmV4cG9ydCBjb25zdCBHSVRIVUJfVE9LRU5fR0VORVJBVEVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9zZXR0aW5ncy90b2tlbnMvbmV3JztcblxuLyoqIEFkZHMgdGhlIHByb3ZpZGVkIHRva2VuIHRvIHRoZSBnaXZlbiBHaXRodWIgSFRUUHMgcmVtb3RlIHVybC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRUb2tlblRvR2l0SHR0cHNVcmwoZ2l0aHViSHR0cHNVcmw6IHN0cmluZywgdG9rZW46IHN0cmluZykge1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKGdpdGh1Ykh0dHBzVXJsKTtcbiAgdXJsLnVzZXJuYW1lID0gdG9rZW47XG4gIHJldHVybiB1cmwuaHJlZjtcbn1cblxuLyoqIEdldHMgdGhlIHJlcG9zaXRvcnkgR2l0IFVSTCBmb3IgdGhlIGdpdmVuIGdpdGh1YiBjb25maWcuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVwb3NpdG9yeUdpdFVybChcbiAgY29uZmlnOiBQaWNrPEdpdGh1YkNvbmZpZywgJ25hbWUnIHwgJ293bmVyJyB8ICd1c2VTc2gnPixcbiAgZ2l0aHViVG9rZW4/OiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICBpZiAoY29uZmlnLnVzZVNzaCkge1xuICAgIHJldHVybiBgZ2l0QGdpdGh1Yi5jb206JHtjb25maWcub3duZXJ9LyR7Y29uZmlnLm5hbWV9LmdpdGA7XG4gIH1cbiAgY29uc3QgYmFzZUh0dHBVcmwgPSBgaHR0cHM6Ly9naXRodWIuY29tLyR7Y29uZmlnLm93bmVyfS8ke2NvbmZpZy5uYW1lfS5naXRgO1xuICBpZiAoZ2l0aHViVG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhZGRUb2tlblRvR2l0SHR0cHNVcmwoYmFzZUh0dHBVcmwsIGdpdGh1YlRva2VuKTtcbiAgfVxuICByZXR1cm4gYmFzZUh0dHBVcmw7XG59XG5cbi8qKiBHZXRzIGEgR2l0aHViIFVSTCB0aGF0IHJlZmVycyB0byBhIGxpc3Qgb2YgcmVjZW50IGNvbW1pdHMgd2l0aGluIGEgc3BlY2lmaWVkIGJyYW5jaC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0Q29tbWl0c0luQnJhbmNoVXJsKHtyZW1vdGVQYXJhbXN9OiBHaXRDbGllbnQsIGJyYW5jaE5hbWU6IHN0cmluZykge1xuICByZXR1cm4gYGh0dHBzOi8vZ2l0aHViLmNvbS8ke3JlbW90ZVBhcmFtcy5vd25lcn0vJHtyZW1vdGVQYXJhbXMucmVwb30vY29tbWl0cy8ke2JyYW5jaE5hbWV9YDtcbn1cbiJdfQ==