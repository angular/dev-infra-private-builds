"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticatedGithubClient = exports.GithubClient = exports.GithubApiRequestError = void 0;
const graphql_1 = require("@octokit/graphql");
const rest_1 = require("@octokit/rest");
const request_error_1 = require("@octokit/request-error");
Object.defineProperty(exports, "GithubApiRequestError", { enumerable: true, get: function () { return request_error_1.RequestError; } });
const typed_graphqlify_1 = require("typed-graphqlify");
/** A Github client for interacting with the Github APIs. */
class GithubClient {
    constructor(_octokitOptions) {
        this._octokitOptions = _octokitOptions;
        /** The octokit instance actually performing API requests. */
        this._octokit = new rest_1.Octokit(this._octokitOptions);
        this.pulls = this._octokit.pulls;
        this.repos = this._octokit.repos;
        this.issues = this._octokit.issues;
        this.git = this._octokit.git;
        this.rateLimit = this._octokit.rateLimit;
        this.teams = this._octokit.teams;
        // Note: These are properties from `Octokit` that are brought in by optional plugins.
        // TypeScript requires us to provide an explicit type for these.
        this.rest = this._octokit.rest;
        this.paginate = this._octokit.paginate;
    }
}
exports.GithubClient = GithubClient;
/**
 * Extension of the `GithubClient` that provides utilities which are specific
 * to authenticated instances.
 */
class AuthenticatedGithubClient extends GithubClient {
    constructor(_token) {
        // Set the token for the octokit instance.
        super({ auth: _token });
        this._token = _token;
        /** The graphql instance with authentication set during construction. */
        this._graphql = graphql_1.graphql.defaults({ headers: { authorization: `token ${this._token}` } });
    }
    /** Perform a query using Github's Graphql API. */
    async graphql(queryObject, params = {}) {
        return (await this._graphql((0, typed_graphqlify_1.query)(queryObject).toString(), params));
    }
}
exports.AuthenticatedGithubClient = AuthenticatedGithubClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3V0aWxzL2dpdC9naXRodWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBR0gsOENBQXlDO0FBR3pDLHdDQUFzQztBQUV0QywwREFBb0Q7QUFLNUIsc0dBTGhCLDRCQUFZLE9BS3lCO0FBSjdDLHVEQUF1QztBQW9CdkMsNERBQTREO0FBQzVELE1BQWEsWUFBWTtJQWdCdkIsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBZnBELDZEQUE2RDtRQUNyRCxhQUFRLEdBQUcsSUFBSSxjQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTVDLFVBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUM1QixVQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDNUIsV0FBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQzlCLFFBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUN4QixjQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFDcEMsVUFBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBRXJDLHFGQUFxRjtRQUNyRixnRUFBZ0U7UUFDdkQsU0FBSSxHQUF3QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMvQyxhQUFRLEdBQXNCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBRVAsQ0FBQztDQUN6RDtBQWpCRCxvQ0FpQkM7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLHlCQUEwQixTQUFRLFlBQVk7SUFJekQsWUFBb0IsTUFBYztRQUNoQywwQ0FBMEM7UUFDMUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7UUFGSixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSGxDLHdFQUF3RTtRQUNoRSxhQUFRLEdBQUcsaUJBQU8sQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUUsRUFBQyxhQUFhLEVBQUUsU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsRUFBQyxDQUFDLENBQUM7SUFLeEYsQ0FBQztJQUVELGtEQUFrRDtJQUNsRCxLQUFLLENBQUMsT0FBTyxDQUErQixXQUFjLEVBQUUsU0FBNEIsRUFBRTtRQUN4RixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUEsd0JBQUssRUFBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBTSxDQUFDO0lBQzNFLENBQUM7Q0FDRjtBQWJELDhEQWFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7T2N0b2tpdE9wdGlvbnN9IGZyb20gJ0BvY3Rva2l0L2NvcmUvZGlzdC10eXBlcy90eXBlcyc7XG5pbXBvcnQge2dyYXBocWx9IGZyb20gJ0BvY3Rva2l0L2dyYXBocWwnO1xuaW1wb3J0IHtQYWdpbmF0ZUludGVyZmFjZX0gZnJvbSAnQG9jdG9raXQvcGx1Z2luLXBhZ2luYXRlLXJlc3QnO1xuaW1wb3J0IHtSZXN0RW5kcG9pbnRNZXRob2RzfSBmcm9tICdAb2N0b2tpdC9wbHVnaW4tcmVzdC1lbmRwb2ludC1tZXRob2RzL2Rpc3QtdHlwZXMvZ2VuZXJhdGVkL21ldGhvZC10eXBlcyc7XG5pbXBvcnQge09jdG9raXR9IGZyb20gJ0BvY3Rva2l0L3Jlc3QnO1xuaW1wb3J0IHtSZXF1ZXN0UGFyYW1ldGVyc30gZnJvbSAnQG9jdG9raXQvdHlwZXMnO1xuaW1wb3J0IHtSZXF1ZXN0RXJyb3J9IGZyb20gJ0BvY3Rva2l0L3JlcXVlc3QtZXJyb3InO1xuaW1wb3J0IHtxdWVyeX0gZnJvbSAndHlwZWQtZ3JhcGhxbGlmeSc7XG5cbi8vIEV4cG9zZSB0aGUgYFJlcXVlc3RFcnJvcmAgY2xhc3MgZnJvbSBPY3Rva2l0IHdpdGggYSBtb3JlIGNvbmNyZXRlXG4vLyBleHBvcnQgbmFtZSwgbWFraW5nIGl0IGVhc2llciB0byBmaW5kIGFuZCB1bmRlcnN0YW5kLlxuZXhwb3J0IHtSZXF1ZXN0RXJyb3IgYXMgR2l0aHViQXBpUmVxdWVzdEVycm9yfTtcblxuLyoqXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYSBHcmFwaHFsIFF1ZXJ5IHRvIGJlIHVzZWQgYXMgYSByZXNwb25zZSB0eXBlIGFuZFxuICogdG8gZ2VuZXJhdGUgYSBHcmFwaHFsIHF1ZXJ5IHN0cmluZy5cbiAqL1xuZXhwb3J0IHR5cGUgR3JhcGhxbFF1ZXJ5T2JqZWN0ID0gUGFyYW1ldGVyczx0eXBlb2YgcXVlcnk+WzFdO1xuXG4vKiogSW50ZXJmYWNlIGRlc2NyaWJpbmcgYSBHaXRodWIgcmVwb3NpdG9yeS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2l0aHViUmVwbyB7XG4gIC8qKiBPd25lciBsb2dpbiBvZiB0aGUgcmVwb3NpdG9yeS4gKi9cbiAgb3duZXI6IHN0cmluZztcbiAgLyoqIE5hbWUgb2YgdGhlIHJlcG9zaXRvcnkuICovXG4gIG5hbWU6IHN0cmluZztcbn1cblxuLyoqIEEgR2l0aHViIGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgR2l0aHViIEFQSXMuICovXG5leHBvcnQgY2xhc3MgR2l0aHViQ2xpZW50IHtcbiAgLyoqIFRoZSBvY3Rva2l0IGluc3RhbmNlIGFjdHVhbGx5IHBlcmZvcm1pbmcgQVBJIHJlcXVlc3RzLiAqL1xuICBwcml2YXRlIF9vY3Rva2l0ID0gbmV3IE9jdG9raXQodGhpcy5fb2N0b2tpdE9wdGlvbnMpO1xuXG4gIHJlYWRvbmx5IHB1bGxzID0gdGhpcy5fb2N0b2tpdC5wdWxscztcbiAgcmVhZG9ubHkgcmVwb3MgPSB0aGlzLl9vY3Rva2l0LnJlcG9zO1xuICByZWFkb25seSBpc3N1ZXMgPSB0aGlzLl9vY3Rva2l0Lmlzc3VlcztcbiAgcmVhZG9ubHkgZ2l0ID0gdGhpcy5fb2N0b2tpdC5naXQ7XG4gIHJlYWRvbmx5IHJhdGVMaW1pdCA9IHRoaXMuX29jdG9raXQucmF0ZUxpbWl0O1xuICByZWFkb25seSB0ZWFtcyA9IHRoaXMuX29jdG9raXQudGVhbXM7XG5cbiAgLy8gTm90ZTogVGhlc2UgYXJlIHByb3BlcnRpZXMgZnJvbSBgT2N0b2tpdGAgdGhhdCBhcmUgYnJvdWdodCBpbiBieSBvcHRpb25hbCBwbHVnaW5zLlxuICAvLyBUeXBlU2NyaXB0IHJlcXVpcmVzIHVzIHRvIHByb3ZpZGUgYW4gZXhwbGljaXQgdHlwZSBmb3IgdGhlc2UuXG4gIHJlYWRvbmx5IHJlc3Q6IFJlc3RFbmRwb2ludE1ldGhvZHMgPSB0aGlzLl9vY3Rva2l0LnJlc3Q7XG4gIHJlYWRvbmx5IHBhZ2luYXRlOiBQYWdpbmF0ZUludGVyZmFjZSA9IHRoaXMuX29jdG9raXQucGFnaW5hdGU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfb2N0b2tpdE9wdGlvbnM/OiBPY3Rva2l0T3B0aW9ucykge31cbn1cblxuLyoqXG4gKiBFeHRlbnNpb24gb2YgdGhlIGBHaXRodWJDbGllbnRgIHRoYXQgcHJvdmlkZXMgdXRpbGl0aWVzIHdoaWNoIGFyZSBzcGVjaWZpY1xuICogdG8gYXV0aGVudGljYXRlZCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGVkR2l0aHViQ2xpZW50IGV4dGVuZHMgR2l0aHViQ2xpZW50IHtcbiAgLyoqIFRoZSBncmFwaHFsIGluc3RhbmNlIHdpdGggYXV0aGVudGljYXRpb24gc2V0IGR1cmluZyBjb25zdHJ1Y3Rpb24uICovXG4gIHByaXZhdGUgX2dyYXBocWwgPSBncmFwaHFsLmRlZmF1bHRzKHtoZWFkZXJzOiB7YXV0aG9yaXphdGlvbjogYHRva2VuICR7dGhpcy5fdG9rZW59YH19KTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90b2tlbjogc3RyaW5nKSB7XG4gICAgLy8gU2V0IHRoZSB0b2tlbiBmb3IgdGhlIG9jdG9raXQgaW5zdGFuY2UuXG4gICAgc3VwZXIoe2F1dGg6IF90b2tlbn0pO1xuICB9XG5cbiAgLyoqIFBlcmZvcm0gYSBxdWVyeSB1c2luZyBHaXRodWIncyBHcmFwaHFsIEFQSS4gKi9cbiAgYXN5bmMgZ3JhcGhxbDxUIGV4dGVuZHMgR3JhcGhxbFF1ZXJ5T2JqZWN0PihxdWVyeU9iamVjdDogVCwgcGFyYW1zOiBSZXF1ZXN0UGFyYW1ldGVycyA9IHt9KSB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLl9ncmFwaHFsKHF1ZXJ5KHF1ZXJ5T2JqZWN0KS50b1N0cmluZygpLCBwYXJhbXMpKSBhcyBUO1xuICB9XG59XG4iXX0=