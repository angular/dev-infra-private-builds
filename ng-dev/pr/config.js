"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertValidMergeConfig = void 0;
const config_1 = require("../utils/config");
/** Loads and validates the merge configuration. */
function assertValidMergeConfig(config) {
    const errors = [];
    if (config.merge === undefined) {
        throw new config_1.ConfigValidationError('No merge configuration found. Set the `merge` configuration.');
    }
    if (!config.merge.claSignedLabel) {
        errors.push('No CLA signed label configured.');
    }
    if (!config.merge.mergeReadyLabel) {
        errors.push('No merge ready label configured.');
    }
    if (config.merge.githubApiMerge === undefined) {
        errors.push('No explicit choice of merge strategy. Please set `githubApiMerge`.');
    }
    if (errors.length) {
        throw new config_1.ConfigValidationError('Invalid `merge` configuration', errors);
    }
}
exports.assertValidMergeConfig = assertValidMergeConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmctZGV2L3ByL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCw0Q0FBb0U7QUF3RHBFLG1EQUFtRDtBQUNuRCxTQUFnQixzQkFBc0IsQ0FDcEMsTUFBeUM7SUFFekMsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBQzVCLElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDOUIsTUFBTSxJQUFJLDhCQUFxQixDQUFDLDhEQUE4RCxDQUFDLENBQUM7S0FDakc7SUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUU7UUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztLQUNqRDtJQUNELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFFO1FBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0VBQW9FLENBQUMsQ0FBQztLQUNuRjtJQUVELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUNqQixNQUFNLElBQUksOEJBQXFCLENBQUMsK0JBQStCLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDMUU7QUFDSCxDQUFDO0FBckJELHdEQXFCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0NvbmZpZ1ZhbGlkYXRpb25FcnJvciwgR2l0aHViQ29uZmlnfSBmcm9tICcuLi91dGlscy9jb25maWcnO1xuXG4vKipcbiAqIFBvc3NpYmxlIG1lcmdlIG1ldGhvZHMgc3VwcG9ydGVkIGJ5IHRoZSBHaXRodWIgQVBJLlxuICogaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9wdWxscy8jbWVyZ2UtYS1wdWxsLXJlcXVlc3QtbWVyZ2UtYnV0dG9uLlxuICovXG5leHBvcnQgdHlwZSBHaXRodWJBcGlNZXJnZU1ldGhvZCA9ICdtZXJnZScgfCAnc3F1YXNoJyB8ICdyZWJhc2UnO1xuXG4vKiogQ29uZmlndXJhdGlvbiBmb3IgdGhlIEdpdGh1YiBBUEkgbWVyZ2Ugc3RyYXRlZ3kuICovXG5leHBvcnQgaW50ZXJmYWNlIEdpdGh1YkFwaU1lcmdlU3RyYXRlZ3lDb25maWcge1xuICAvKiogRGVmYXVsdCBtZXRob2QgdXNlZCBmb3IgbWVyZ2luZyBwdWxsIHJlcXVlc3RzICovXG4gIGRlZmF1bHQ6IEdpdGh1YkFwaU1lcmdlTWV0aG9kO1xuICAvKiogTGFiZWxzIHdoaWNoIHNwZWNpZnkgYSBkaWZmZXJlbnQgbWVyZ2UgbWV0aG9kIHRoYW4gdGhlIGRlZmF1bHQuICovXG4gIGxhYmVscz86IHtwYXR0ZXJuOiBzdHJpbmc7IG1ldGhvZDogR2l0aHViQXBpTWVyZ2VNZXRob2R9W107XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIG1lcmdlIHNjcmlwdCB3aXRoIGFsbCByZW1vdGUgb3B0aW9ucyBzcGVjaWZpZWQuIFRoZVxuICogZGVmYXVsdCBgTWVyZ2VDb25maWdgIGhhcyBkb2VzIG5vdCByZXF1aXJlIGFueSBvZiB0aGVzZSBvcHRpb25zIGFzIGRlZmF1bHRzXG4gKiBhcmUgcHJvdmlkZWQgYnkgdGhlIGNvbW1vbiBkZXYtaW5mcmEgZ2l0aHViIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCB0eXBlIE1lcmdlQ29uZmlnV2l0aFJlbW90ZSA9IE1lcmdlQ29uZmlnICYge3JlbW90ZTogR2l0aHViQ29uZmlnfTtcblxuLyoqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBtZXJnZSBzY3JpcHQuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lcmdlQ29uZmlnIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSB1cHN0cmVhbSByZW1vdGUuIEFsbCBvZiB0aGVzZSBvcHRpb25zIGFyZSBvcHRpb25hbCBhc1xuICAgKiBkZWZhdWx0cyBhcmUgcHJvdmlkZWQgYnkgdGhlIGNvbW1vbiBkZXYtaW5mcmEgZ2l0aHViIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICByZW1vdGU/OiBHaXRodWJDb25maWc7XG4gIC8qKiBMaXN0IG9mIHRhcmdldCBsYWJlbHMuICovXG4gIG5vVGFyZ2V0TGFiZWxpbmc/OiBib29sZWFuO1xuICAvKiogUmVxdWlyZWQgYmFzZSBjb21taXRzIGZvciBnaXZlbiBicmFuY2hlcy4gKi9cbiAgcmVxdWlyZWRCYXNlQ29tbWl0cz86IHtbYnJhbmNoTmFtZTogc3RyaW5nXTogc3RyaW5nfTtcbiAgLyoqIFBhdHRlcm4gdGhhdCBtYXRjaGVzIGxhYmVscyB3aGljaCBpbXBseSBhIHNpZ25lZCBDTEEuICovXG4gIGNsYVNpZ25lZExhYmVsOiBzdHJpbmcgfCBSZWdFeHA7XG4gIC8qKiBQYXR0ZXJuIHRoYXQgbWF0Y2hlcyBsYWJlbHMgd2hpY2ggaW1wbHkgYSBtZXJnZSByZWFkeSBwdWxsIHJlcXVlc3QuICovXG4gIG1lcmdlUmVhZHlMYWJlbDogc3RyaW5nIHwgUmVnRXhwO1xuICAvKiogTGFiZWwgdGhhdCBpcyBhcHBsaWVkIHdoZW4gc3BlY2lhbCBhdHRlbnRpb24gZnJvbSB0aGUgY2FyZXRha2VyIGlzIHJlcXVpcmVkLiAqL1xuICBjYXJldGFrZXJOb3RlTGFiZWw/OiBzdHJpbmcgfCBSZWdFeHA7XG4gIC8qKiBMYWJlbCB3aGljaCBjYW4gYmUgYXBwbGllZCB0byBmaXh1cCBjb21taXQgbWVzc2FnZXMgaW4gdGhlIG1lcmdlIHNjcmlwdC4gKi9cbiAgY29tbWl0TWVzc2FnZUZpeHVwTGFiZWw6IHN0cmluZyB8IFJlZ0V4cDtcbiAgLyoqXG4gICAqIFdoZXRoZXIgcHVsbCByZXF1ZXN0cyBzaG91bGQgYmUgbWVyZ2VkIHVzaW5nIHRoZSBHaXRodWIgQVBJLiBUaGlzIGNhbiBiZSBlbmFibGVkXG4gICAqIGlmIHByb2plY3RzIHdhbnQgdG8gaGF2ZSB0aGVpciBwdWxsIHJlcXVlc3RzIHNob3cgdXAgYXMgYE1lcmdlZGAgaW4gdGhlIEdpdGh1YiBVSS5cbiAgICogVGhlIGRvd25zaWRlIGlzIHRoYXQgZml4dXAgb3Igc3F1YXNoIGNvbW1pdHMgbm8gbG9uZ2VyIHdvcmsgYXMgdGhlIEdpdGh1YiBBUEkgZG9lc1xuICAgKiBub3Qgc3VwcG9ydCB0aGlzLlxuICAgKi9cbiAgZ2l0aHViQXBpTWVyZ2U6IGZhbHNlIHwgR2l0aHViQXBpTWVyZ2VTdHJhdGVneUNvbmZpZztcbiAgLyoqXG4gICAqIExpc3Qgb2YgY29tbWl0IHNjb3BlcyB3aGljaCBhcmUgZXhlbXB0ZWQgZnJvbSB0YXJnZXQgbGFiZWwgY29udGVudCByZXF1aXJlbWVudHMuIGkuZS4gbm8gYGZlYXRgXG4gICAqIHNjb3BlcyBpbiBwYXRjaCBicmFuY2hlcywgbm8gYnJlYWtpbmcgY2hhbmdlcyBpbiBtaW5vciBvciBwYXRjaCBjaGFuZ2VzLlxuICAgKi9cbiAgdGFyZ2V0TGFiZWxFeGVtcHRTY29wZXM/OiBzdHJpbmdbXTtcbn1cblxuLyoqIExvYWRzIGFuZCB2YWxpZGF0ZXMgdGhlIG1lcmdlIGNvbmZpZ3VyYXRpb24uICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VmFsaWRNZXJnZUNvbmZpZzxUPihcbiAgY29uZmlnOiBUICYgUGFydGlhbDx7bWVyZ2U6IE1lcmdlQ29uZmlnfT4sXG4pOiBhc3NlcnRzIGNvbmZpZyBpcyBUICYge21lcmdlOiBNZXJnZUNvbmZpZ30ge1xuICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XG4gIGlmIChjb25maWcubWVyZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBDb25maWdWYWxpZGF0aW9uRXJyb3IoJ05vIG1lcmdlIGNvbmZpZ3VyYXRpb24gZm91bmQuIFNldCB0aGUgYG1lcmdlYCBjb25maWd1cmF0aW9uLicpO1xuICB9XG5cbiAgaWYgKCFjb25maWcubWVyZ2UuY2xhU2lnbmVkTGFiZWwpIHtcbiAgICBlcnJvcnMucHVzaCgnTm8gQ0xBIHNpZ25lZCBsYWJlbCBjb25maWd1cmVkLicpO1xuICB9XG4gIGlmICghY29uZmlnLm1lcmdlLm1lcmdlUmVhZHlMYWJlbCkge1xuICAgIGVycm9ycy5wdXNoKCdObyBtZXJnZSByZWFkeSBsYWJlbCBjb25maWd1cmVkLicpO1xuICB9XG4gIGlmIChjb25maWcubWVyZ2UuZ2l0aHViQXBpTWVyZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgIGVycm9ycy5wdXNoKCdObyBleHBsaWNpdCBjaG9pY2Ugb2YgbWVyZ2Ugc3RyYXRlZ3kuIFBsZWFzZSBzZXQgYGdpdGh1YkFwaU1lcmdlYC4nKTtcbiAgfVxuXG4gIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IENvbmZpZ1ZhbGlkYXRpb25FcnJvcignSW52YWxpZCBgbWVyZ2VgIGNvbmZpZ3VyYXRpb24nLCBlcnJvcnMpO1xuICB9XG59XG4iXX0=