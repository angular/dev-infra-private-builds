"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPullRequest = exports.loadAndValidatePullRequest = void 0;
const parse_1 = require("../../commit-message/parse");
const failures_1 = require("../common/validation/failures");
const target_label_1 = require("../common/targeting/target-label");
const validations_1 = require("../common/validation/validations");
const fetch_pull_request_1 = require("../common/fetch-pull-request");
/**
 * Loads and validates the specified pull request against the given configuration.
 * If the pull requests fails, a pull request failure is returned.
 */
async function loadAndValidatePullRequest({ git, config }, prNumber, ignoreNonFatalFailures = false) {
    const prData = await (0, fetch_pull_request_1.fetchPullRequestFromGithub)(git, prNumber);
    if (prData === null) {
        return failures_1.PullRequestFailure.notFound();
    }
    const labels = prData.labels.nodes.map((l) => l.name);
    /** List of parsed commits for all of the commits in the pull request. */
    const commitsInPr = prData.commits.nodes.map((n) => (0, parse_1.parseCommitMessage)(n.commit.message));
    const githubTargetBranch = prData.baseRefName;
    const targetBranches = await (0, target_label_1.getTargetBranchesForPullRequest)(git.github, config, labels, githubTargetBranch, commitsInPr);
    try {
        (0, validations_1.assertMergeReady)(prData, config.pullRequest);
        (0, validations_1.assertSignedCla)(prData);
        (0, validations_1.assertPendingState)(prData);
        (0, validations_1.assertCorrectBreakingChangeLabeling)(commitsInPr, labels);
        if (!ignoreNonFatalFailures) {
            (0, validations_1.assertPassingCi)(prData);
        }
    }
    catch (error) {
        // If the error is a pull request failure, we pass it through gracefully
        // as the tool expects such failures to be returned from the function.
        if (error instanceof failures_1.PullRequestFailure) {
            return error;
        }
        throw error;
    }
    const requiredBaseSha = config.pullRequest.requiredBaseCommits &&
        config.pullRequest.requiredBaseCommits[githubTargetBranch];
    const needsCommitMessageFixup = !!config.pullRequest.commitMessageFixupLabel &&
        labels.some((name) => (0, validations_1.matchesPattern)(name, config.pullRequest.commitMessageFixupLabel));
    const hasCaretakerNote = !!config.pullRequest.caretakerNoteLabel &&
        labels.some((name) => (0, validations_1.matchesPattern)(name, config.pullRequest.caretakerNoteLabel));
    return {
        url: prData.url,
        prNumber,
        labels,
        requiredBaseSha,
        githubTargetBranch,
        needsCommitMessageFixup,
        hasCaretakerNote,
        targetBranches,
        title: prData.title,
        commitCount: prData.commits.totalCount,
    };
}
exports.loadAndValidatePullRequest = loadAndValidatePullRequest;
/** Whether the specified value resolves to a pull request. */
function isPullRequest(v) {
    return v.targetBranches !== undefined;
}
exports.isPullRequest = isPullRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbC1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3ByL21lcmdlL3B1bGwtcmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCxzREFBOEQ7QUFDOUQsNERBQWlFO0FBRWpFLG1FQUFpRjtBQUNqRixrRUFPMEM7QUFDMUMscUVBQXdFO0FBMEJ4RTs7O0dBR0c7QUFDSSxLQUFLLFVBQVUsMEJBQTBCLENBQzlDLEVBQUMsR0FBRyxFQUFFLE1BQU0sRUFBdUIsRUFDbkMsUUFBZ0IsRUFDaEIsc0JBQXNCLEdBQUcsS0FBSztJQUU5QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsK0NBQTBCLEVBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRS9ELElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtRQUNuQixPQUFPLDZCQUFrQixDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3RDO0lBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdEQseUVBQXlFO0lBQ3pFLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBQSwwQkFBa0IsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDMUYsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBRTlDLE1BQU0sY0FBYyxHQUFHLE1BQU0sSUFBQSw4Q0FBK0IsRUFDMUQsR0FBRyxDQUFDLE1BQU0sRUFDVixNQUFNLEVBQ04sTUFBTSxFQUNOLGtCQUFrQixFQUNsQixXQUFXLENBQ1osQ0FBQztJQUVGLElBQUk7UUFDRixJQUFBLDhCQUFnQixFQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDN0MsSUFBQSw2QkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLElBQUEsZ0NBQWtCLEVBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsSUFBQSxpREFBbUMsRUFBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQzNCLElBQUEsNkJBQWUsRUFBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjtLQUNGO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCx3RUFBd0U7UUFDeEUsc0VBQXNFO1FBQ3RFLElBQUksS0FBSyxZQUFZLDZCQUFrQixFQUFFO1lBQ3ZDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLEtBQUssQ0FBQztLQUNiO0lBRUQsTUFBTSxlQUFlLEdBQ25CLE1BQU0sQ0FBQyxXQUFXLENBQUMsbUJBQW1CO1FBQ3RDLE1BQU0sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM3RCxNQUFNLHVCQUF1QixHQUMzQixDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUI7UUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBQSw0QkFBYyxFQUFDLElBQUksRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUMxRixNQUFNLGdCQUFnQixHQUNwQixDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0I7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBQSw0QkFBYyxFQUFDLElBQUksRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFtQixDQUFDLENBQUMsQ0FBQztJQUV0RixPQUFPO1FBQ0wsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHO1FBQ2YsUUFBUTtRQUNSLE1BQU07UUFDTixlQUFlO1FBQ2Ysa0JBQWtCO1FBQ2xCLHVCQUF1QjtRQUN2QixnQkFBZ0I7UUFDaEIsY0FBYztRQUNkLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztRQUNuQixXQUFXLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVO0tBQ3ZDLENBQUM7QUFDSixDQUFDO0FBakVELGdFQWlFQztBQUVELDhEQUE4RDtBQUM5RCxTQUFnQixhQUFhLENBQUMsQ0FBbUM7SUFDL0QsT0FBUSxDQUFpQixDQUFDLGNBQWMsS0FBSyxTQUFTLENBQUM7QUFDekQsQ0FBQztBQUZELHNDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7cGFyc2VDb21taXRNZXNzYWdlfSBmcm9tICcuLi8uLi9jb21taXQtbWVzc2FnZS9wYXJzZSc7XG5pbXBvcnQge1B1bGxSZXF1ZXN0RmFpbHVyZX0gZnJvbSAnLi4vY29tbW9uL3ZhbGlkYXRpb24vZmFpbHVyZXMnO1xuaW1wb3J0IHtQdWxsUmVxdWVzdE1lcmdlVGFza30gZnJvbSAnLi90YXNrJztcbmltcG9ydCB7Z2V0VGFyZ2V0QnJhbmNoZXNGb3JQdWxsUmVxdWVzdH0gZnJvbSAnLi4vY29tbW9uL3RhcmdldGluZy90YXJnZXQtbGFiZWwnO1xuaW1wb3J0IHtcbiAgYXNzZXJ0Q29ycmVjdEJyZWFraW5nQ2hhbmdlTGFiZWxpbmcsXG4gIGFzc2VydE1lcmdlUmVhZHksXG4gIG1hdGNoZXNQYXR0ZXJuLFxuICBhc3NlcnRQZW5kaW5nU3RhdGUsXG4gIGFzc2VydFNpZ25lZENsYSxcbiAgYXNzZXJ0UGFzc2luZ0NpLFxufSBmcm9tICcuLi9jb21tb24vdmFsaWRhdGlvbi92YWxpZGF0aW9ucyc7XG5pbXBvcnQge2ZldGNoUHVsbFJlcXVlc3RGcm9tR2l0aHVifSBmcm9tICcuLi9jb21tb24vZmV0Y2gtcHVsbC1yZXF1ZXN0JztcblxuLyoqIEludGVyZmFjZSB0aGF0IGRlc2NyaWJlcyBhIHB1bGwgcmVxdWVzdC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHVsbFJlcXVlc3Qge1xuICAvKiogVVJMIHRvIHRoZSBwdWxsIHJlcXVlc3QuICovXG4gIHVybDogc3RyaW5nO1xuICAvKiogTnVtYmVyIG9mIHRoZSBwdWxsIHJlcXVlc3QuICovXG4gIHByTnVtYmVyOiBudW1iZXI7XG4gIC8qKiBUaXRsZSBvZiB0aGUgcHVsbCByZXF1ZXN0LiAqL1xuICB0aXRsZTogc3RyaW5nO1xuICAvKiogTGFiZWxzIGFwcGxpZWQgdG8gdGhlIHB1bGwgcmVxdWVzdC4gKi9cbiAgbGFiZWxzOiBzdHJpbmdbXTtcbiAgLyoqIExpc3Qgb2YgYnJhbmNoZXMgdGhpcyBQUiBzaG91bGQgYmUgbWVyZ2VkIGludG8uICovXG4gIHRhcmdldEJyYW5jaGVzOiBzdHJpbmdbXTtcbiAgLyoqIEJyYW5jaCB0aGF0IHRoZSBQUiB0YXJnZXRzIGluIHRoZSBHaXRodWIgVUkuICovXG4gIGdpdGh1YlRhcmdldEJyYW5jaDogc3RyaW5nO1xuICAvKiogQ291bnQgb2YgY29tbWl0cyBpbiB0aGlzIHB1bGwgcmVxdWVzdC4gKi9cbiAgY29tbWl0Q291bnQ6IG51bWJlcjtcbiAgLyoqIE9wdGlvbmFsIFNIQSB0aGF0IHRoaXMgcHVsbCByZXF1ZXN0IG5lZWRzIHRvIGJlIGJhc2VkIG9uLiAqL1xuICByZXF1aXJlZEJhc2VTaGE/OiBzdHJpbmc7XG4gIC8qKiBXaGV0aGVyIHRoZSBwdWxsIHJlcXVlc3QgY29tbWl0IG1lc3NhZ2UgZml4dXAuICovXG4gIG5lZWRzQ29tbWl0TWVzc2FnZUZpeHVwOiBib29sZWFuO1xuICAvKiogV2hldGhlciB0aGUgcHVsbCByZXF1ZXN0IGhhcyBhIGNhcmV0YWtlciBub3RlLiAqL1xuICBoYXNDYXJldGFrZXJOb3RlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIExvYWRzIGFuZCB2YWxpZGF0ZXMgdGhlIHNwZWNpZmllZCBwdWxsIHJlcXVlc3QgYWdhaW5zdCB0aGUgZ2l2ZW4gY29uZmlndXJhdGlvbi5cbiAqIElmIHRoZSBwdWxsIHJlcXVlc3RzIGZhaWxzLCBhIHB1bGwgcmVxdWVzdCBmYWlsdXJlIGlzIHJldHVybmVkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEFuZFZhbGlkYXRlUHVsbFJlcXVlc3QoXG4gIHtnaXQsIGNvbmZpZ306IFB1bGxSZXF1ZXN0TWVyZ2VUYXNrLFxuICBwck51bWJlcjogbnVtYmVyLFxuICBpZ25vcmVOb25GYXRhbEZhaWx1cmVzID0gZmFsc2UsXG4pOiBQcm9taXNlPFB1bGxSZXF1ZXN0IHwgUHVsbFJlcXVlc3RGYWlsdXJlPiB7XG4gIGNvbnN0IHByRGF0YSA9IGF3YWl0IGZldGNoUHVsbFJlcXVlc3RGcm9tR2l0aHViKGdpdCwgcHJOdW1iZXIpO1xuXG4gIGlmIChwckRhdGEgPT09IG51bGwpIHtcbiAgICByZXR1cm4gUHVsbFJlcXVlc3RGYWlsdXJlLm5vdEZvdW5kKCk7XG4gIH1cblxuICBjb25zdCBsYWJlbHMgPSBwckRhdGEubGFiZWxzLm5vZGVzLm1hcCgobCkgPT4gbC5uYW1lKTtcblxuICAvKiogTGlzdCBvZiBwYXJzZWQgY29tbWl0cyBmb3IgYWxsIG9mIHRoZSBjb21taXRzIGluIHRoZSBwdWxsIHJlcXVlc3QuICovXG4gIGNvbnN0IGNvbW1pdHNJblByID0gcHJEYXRhLmNvbW1pdHMubm9kZXMubWFwKChuKSA9PiBwYXJzZUNvbW1pdE1lc3NhZ2Uobi5jb21taXQubWVzc2FnZSkpO1xuICBjb25zdCBnaXRodWJUYXJnZXRCcmFuY2ggPSBwckRhdGEuYmFzZVJlZk5hbWU7XG5cbiAgY29uc3QgdGFyZ2V0QnJhbmNoZXMgPSBhd2FpdCBnZXRUYXJnZXRCcmFuY2hlc0ZvclB1bGxSZXF1ZXN0KFxuICAgIGdpdC5naXRodWIsXG4gICAgY29uZmlnLFxuICAgIGxhYmVscyxcbiAgICBnaXRodWJUYXJnZXRCcmFuY2gsXG4gICAgY29tbWl0c0luUHIsXG4gICk7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRNZXJnZVJlYWR5KHByRGF0YSwgY29uZmlnLnB1bGxSZXF1ZXN0KTtcbiAgICBhc3NlcnRTaWduZWRDbGEocHJEYXRhKTtcbiAgICBhc3NlcnRQZW5kaW5nU3RhdGUocHJEYXRhKTtcbiAgICBhc3NlcnRDb3JyZWN0QnJlYWtpbmdDaGFuZ2VMYWJlbGluZyhjb21taXRzSW5QciwgbGFiZWxzKTtcblxuICAgIGlmICghaWdub3JlTm9uRmF0YWxGYWlsdXJlcykge1xuICAgICAgYXNzZXJ0UGFzc2luZ0NpKHByRGF0YSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIElmIHRoZSBlcnJvciBpcyBhIHB1bGwgcmVxdWVzdCBmYWlsdXJlLCB3ZSBwYXNzIGl0IHRocm91Z2ggZ3JhY2VmdWxseVxuICAgIC8vIGFzIHRoZSB0b29sIGV4cGVjdHMgc3VjaCBmYWlsdXJlcyB0byBiZSByZXR1cm5lZCBmcm9tIHRoZSBmdW5jdGlvbi5cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBQdWxsUmVxdWVzdEZhaWx1cmUpIHtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBjb25zdCByZXF1aXJlZEJhc2VTaGEgPVxuICAgIGNvbmZpZy5wdWxsUmVxdWVzdC5yZXF1aXJlZEJhc2VDb21taXRzICYmXG4gICAgY29uZmlnLnB1bGxSZXF1ZXN0LnJlcXVpcmVkQmFzZUNvbW1pdHNbZ2l0aHViVGFyZ2V0QnJhbmNoXTtcbiAgY29uc3QgbmVlZHNDb21taXRNZXNzYWdlRml4dXAgPVxuICAgICEhY29uZmlnLnB1bGxSZXF1ZXN0LmNvbW1pdE1lc3NhZ2VGaXh1cExhYmVsICYmXG4gICAgbGFiZWxzLnNvbWUoKG5hbWUpID0+IG1hdGNoZXNQYXR0ZXJuKG5hbWUsIGNvbmZpZy5wdWxsUmVxdWVzdC5jb21taXRNZXNzYWdlRml4dXBMYWJlbCkpO1xuICBjb25zdCBoYXNDYXJldGFrZXJOb3RlID1cbiAgICAhIWNvbmZpZy5wdWxsUmVxdWVzdC5jYXJldGFrZXJOb3RlTGFiZWwgJiZcbiAgICBsYWJlbHMuc29tZSgobmFtZSkgPT4gbWF0Y2hlc1BhdHRlcm4obmFtZSwgY29uZmlnLnB1bGxSZXF1ZXN0LmNhcmV0YWtlck5vdGVMYWJlbCEpKTtcblxuICByZXR1cm4ge1xuICAgIHVybDogcHJEYXRhLnVybCxcbiAgICBwck51bWJlcixcbiAgICBsYWJlbHMsXG4gICAgcmVxdWlyZWRCYXNlU2hhLFxuICAgIGdpdGh1YlRhcmdldEJyYW5jaCxcbiAgICBuZWVkc0NvbW1pdE1lc3NhZ2VGaXh1cCxcbiAgICBoYXNDYXJldGFrZXJOb3RlLFxuICAgIHRhcmdldEJyYW5jaGVzLFxuICAgIHRpdGxlOiBwckRhdGEudGl0bGUsXG4gICAgY29tbWl0Q291bnQ6IHByRGF0YS5jb21taXRzLnRvdGFsQ291bnQsXG4gIH07XG59XG5cbi8qKiBXaGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgcmVzb2x2ZXMgdG8gYSBwdWxsIHJlcXVlc3QuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQdWxsUmVxdWVzdCh2OiBQdWxsUmVxdWVzdEZhaWx1cmUgfCBQdWxsUmVxdWVzdCk6IHYgaXMgUHVsbFJlcXVlc3Qge1xuICByZXR1cm4gKHYgYXMgUHVsbFJlcXVlc3QpLnRhcmdldEJyYW5jaGVzICE9PSB1bmRlZmluZWQ7XG59XG4iXX0=