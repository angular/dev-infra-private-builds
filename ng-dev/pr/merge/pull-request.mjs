"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPullRequest = exports.loadAndValidatePullRequest = void 0;
const parse_1 = require("../../commit-message/parse");
const failures_1 = require("./failures");
const string_pattern_1 = require("./string-pattern");
const target_label_1 = require("./target-label");
const validations_1 = require("./validations");
const fetch_pull_request_1 = require("../common/fetch-pull-request");
/**
 * Loads and validates the specified pull request against the given configuration.
 * If the pull requests fails, a pull request failure is returned.
 */
async function loadAndValidatePullRequest({ git, config }, prNumber, ignoreNonFatalFailures = false) {
    const prData = await (0, fetch_pull_request_1.fetchPullRequestFromGithub)(git, prNumber);
    if (prData === null) {
        return failures_1.PullRequestFailure.notFound();
    }
    const labels = prData.labels.nodes.map((l) => l.name);
    if (!labels.some((name) => (0, string_pattern_1.matchesPattern)(name, config.mergeReadyLabel))) {
        return failures_1.PullRequestFailure.notMergeReady();
    }
    if (!labels.some((name) => (0, string_pattern_1.matchesPattern)(name, config.claSignedLabel))) {
        return failures_1.PullRequestFailure.claUnsigned();
    }
    /** List of parsed commits for all of the commits in the pull request. */
    const commitsInPr = prData.commits.nodes.map((n) => (0, parse_1.parseCommitMessage)(n.commit.message));
    const githubTargetBranch = prData.baseRefName;
    const targetBranches = await (0, target_label_1.getTargetBranchesForPullRequest)(git.github, { github: git.config.github, merge: config }, labels, githubTargetBranch, commitsInPr);
    try {
        (0, validations_1.assertPendingState)(prData);
        (0, validations_1.assertCorrectBreakingChangeLabeling)(commitsInPr, labels);
    }
    catch (error) {
        // If the error is a pull request failure, we pass it through gracefully
        // as the tool expects such failures to be returned from the function.
        if (error instanceof failures_1.PullRequestFailure) {
            return error;
        }
        throw error;
    }
    /** The combined status of the latest commit in the pull request. */
    const state = prData.commits.nodes.slice(-1)[0].commit.status.state;
    if (state === 'FAILURE' && !ignoreNonFatalFailures) {
        return failures_1.PullRequestFailure.failingCiJobs();
    }
    if (state === 'PENDING' && !ignoreNonFatalFailures) {
        return failures_1.PullRequestFailure.pendingCiJobs();
    }
    const requiredBaseSha = config.requiredBaseCommits && config.requiredBaseCommits[githubTargetBranch];
    const needsCommitMessageFixup = !!config.commitMessageFixupLabel &&
        labels.some((name) => (0, string_pattern_1.matchesPattern)(name, config.commitMessageFixupLabel));
    const hasCaretakerNote = !!config.caretakerNoteLabel &&
        labels.some((name) => (0, string_pattern_1.matchesPattern)(name, config.caretakerNoteLabel));
    return {
        url: prData.url,
        prNumber,
        labels,
        requiredBaseSha,
        githubTargetBranch,
        needsCommitMessageFixup,
        hasCaretakerNote,
        targetBranches,
        title: prData.title,
        commitCount: prData.commits.totalCount,
    };
}
exports.loadAndValidatePullRequest = loadAndValidatePullRequest;
/** Whether the specified value resolves to a pull request. */
function isPullRequest(v) {
    return v.targetBranches !== undefined;
}
exports.isPullRequest = isPullRequest;
//# sourceMappingURL=data:application/json;base64,