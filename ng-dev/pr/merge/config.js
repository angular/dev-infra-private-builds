"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAndValidateConfig = void 0;
/** Loads and validates the merge configuration. */
async function loadAndValidateConfig(config, api) {
    if (config.merge === undefined) {
        return { errors: ['No merge configuration found. Set the `merge` configuration.'] };
    }
    if (typeof config.merge !== 'function') {
        return { errors: ['Expected merge configuration to be defined lazily through a function.'] };
    }
    const mergeConfig = await config.merge(api);
    const errors = validateMergeConfig(mergeConfig);
    if (errors.length) {
        return { errors };
    }
    return { config: mergeConfig };
}
exports.loadAndValidateConfig = loadAndValidateConfig;
/** Validates the specified configuration. Returns a list of failure messages. */
function validateMergeConfig(config) {
    const errors = [];
    if (!config.labels) {
        errors.push('No label configuration.');
    }
    else if (!Array.isArray(config.labels)) {
        errors.push('Label configuration needs to be an array.');
    }
    if (!config.claSignedLabel) {
        errors.push('No CLA signed label configured.');
    }
    if (!config.mergeReadyLabel) {
        errors.push('No merge ready label configured.');
    }
    if (config.githubApiMerge === undefined) {
        errors.push('No explicit choice of merge strategy. Please set `githubApiMerge`.');
    }
    return errors;
}
//# sourceMappingURL=data:application/json;base64,