"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printTargetBranchesForPr = void 0;
const config_1 = require("../../utils/config");
const console_1 = require("../../utils/console");
const git_client_1 = require("../../utils/git/git-client");
const config_2 = require("../config");
const target_label_1 = require("../merge/target-label");
async function getTargetBranchesForPr(prNumber, config) {
    /** Repo owner and name for the github repository. */
    const { owner, name: repo } = config.github;
    /** The singleton instance of the GitClient. */
    const git = git_client_1.GitClient.get();
    /** The current state of the pull request from Github. */
    const prData = (await git.github.pulls.get({ owner, repo, pull_number: prNumber })).data;
    /** The list of labels on the PR as strings. */
    // Note: The `name` property of labels is always set but the Github OpenAPI spec is incorrect
    // here.
    // TODO(devversion): Remove the non-null cast once
    // https://github.com/github/rest-api-description/issues/169 is fixed.
    const labels = prData.labels.map((l) => l.name);
    /** The branch targetted via the Github UI. */
    const githubTargetBranch = prData.base.ref;
    // Note: We do not pass a list of commits here because we did not fetch this information
    // and the commits are only used for validation (which we can skip here).
    return (0, target_label_1.getTargetBranchesForPullRequest)(git.github, config, labels, githubTargetBranch, []);
}
async function printTargetBranchesForPr(prNumber) {
    const config = (0, config_1.getConfig)();
    (0, config_1.assertValidGithubConfig)(config);
    (0, config_2.assertValidMergeConfig)(config);
    if (config.merge.noTargetLabeling) {
        (0, console_1.info)(`PR #${prNumber} will merge into: ${config.github.mainBranchName}`);
        return;
    }
    const targets = await getTargetBranchesForPr(prNumber, config);
    console_1.info.group(`PR #${prNumber} will merge into:`);
    targets.forEach((target) => (0, console_1.info)(`- ${target}`));
    console_1.info.groupEnd();
}
exports.printTargetBranchesForPr = printTargetBranchesForPr;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stdGFyZ2V0LWJyYW5jaGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3ByL2NoZWNrLXRhcmdldC1icmFuY2hlcy9jaGVjay10YXJnZXQtYnJhbmNoZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsK0NBQW9GO0FBQ3BGLGlEQUF5QztBQUN6QywyREFBcUQ7QUFDckQsc0NBQThEO0FBQzlELHdEQUFzRTtBQUV0RSxLQUFLLFVBQVUsc0JBQXNCLENBQ25DLFFBQWdCLEVBQ2hCLE1BQWtEO0lBRWxELHFEQUFxRDtJQUNyRCxNQUFNLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzFDLCtDQUErQztJQUMvQyxNQUFNLEdBQUcsR0FBRyxzQkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRTVCLHlEQUF5RDtJQUN6RCxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN2RiwrQ0FBK0M7SUFDL0MsNkZBQTZGO0lBQzdGLFFBQVE7SUFDUixrREFBa0Q7SUFDbEQsc0VBQXNFO0lBQ3RFLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSyxDQUFDLENBQUM7SUFDakQsOENBQThDO0lBQzlDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFFM0Msd0ZBQXdGO0lBQ3hGLHlFQUF5RTtJQUN6RSxPQUFPLElBQUEsOENBQStCLEVBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzdGLENBQUM7QUFFTSxLQUFLLFVBQVUsd0JBQXdCLENBQUMsUUFBZ0I7SUFDN0QsTUFBTSxNQUFNLEdBQUcsSUFBQSxrQkFBUyxHQUFFLENBQUM7SUFDM0IsSUFBQSxnQ0FBdUIsRUFBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxJQUFBLCtCQUFzQixFQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9CLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTtRQUNqQyxJQUFBLGNBQUksRUFBQyxPQUFPLFFBQVEscUJBQXFCLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUN6RSxPQUFPO0tBQ1I7SUFFRCxNQUFNLE9BQU8sR0FBRyxNQUFNLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvRCxjQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sUUFBUSxtQkFBbUIsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUEsY0FBSSxFQUFDLEtBQUssTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELGNBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNsQixDQUFDO0FBZEQsNERBY0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHthc3NlcnRWYWxpZEdpdGh1YkNvbmZpZywgZ2V0Q29uZmlnLCBHaXRodWJDb25maWd9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmZpZyc7XG5pbXBvcnQge2luZm99IGZyb20gJy4uLy4uL3V0aWxzL2NvbnNvbGUnO1xuaW1wb3J0IHtHaXRDbGllbnR9IGZyb20gJy4uLy4uL3V0aWxzL2dpdC9naXQtY2xpZW50JztcbmltcG9ydCB7YXNzZXJ0VmFsaWRNZXJnZUNvbmZpZywgTWVyZ2VDb25maWd9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge2dldFRhcmdldEJyYW5jaGVzRm9yUHVsbFJlcXVlc3R9IGZyb20gJy4uL21lcmdlL3RhcmdldC1sYWJlbCc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFRhcmdldEJyYW5jaGVzRm9yUHIoXG4gIHByTnVtYmVyOiBudW1iZXIsXG4gIGNvbmZpZzoge2dpdGh1YjogR2l0aHViQ29uZmlnOyBtZXJnZTogTWVyZ2VDb25maWd9LFxuKSB7XG4gIC8qKiBSZXBvIG93bmVyIGFuZCBuYW1lIGZvciB0aGUgZ2l0aHViIHJlcG9zaXRvcnkuICovXG4gIGNvbnN0IHtvd25lciwgbmFtZTogcmVwb30gPSBjb25maWcuZ2l0aHViO1xuICAvKiogVGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgR2l0Q2xpZW50LiAqL1xuICBjb25zdCBnaXQgPSBHaXRDbGllbnQuZ2V0KCk7XG5cbiAgLyoqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBwdWxsIHJlcXVlc3QgZnJvbSBHaXRodWIuICovXG4gIGNvbnN0IHByRGF0YSA9IChhd2FpdCBnaXQuZ2l0aHViLnB1bGxzLmdldCh7b3duZXIsIHJlcG8sIHB1bGxfbnVtYmVyOiBwck51bWJlcn0pKS5kYXRhO1xuICAvKiogVGhlIGxpc3Qgb2YgbGFiZWxzIG9uIHRoZSBQUiBhcyBzdHJpbmdzLiAqL1xuICAvLyBOb3RlOiBUaGUgYG5hbWVgIHByb3BlcnR5IG9mIGxhYmVscyBpcyBhbHdheXMgc2V0IGJ1dCB0aGUgR2l0aHViIE9wZW5BUEkgc3BlYyBpcyBpbmNvcnJlY3RcbiAgLy8gaGVyZS5cbiAgLy8gVE9ETyhkZXZ2ZXJzaW9uKTogUmVtb3ZlIHRoZSBub24tbnVsbCBjYXN0IG9uY2VcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9yZXN0LWFwaS1kZXNjcmlwdGlvbi9pc3N1ZXMvMTY5IGlzIGZpeGVkLlxuICBjb25zdCBsYWJlbHMgPSBwckRhdGEubGFiZWxzLm1hcCgobCkgPT4gbC5uYW1lISk7XG4gIC8qKiBUaGUgYnJhbmNoIHRhcmdldHRlZCB2aWEgdGhlIEdpdGh1YiBVSS4gKi9cbiAgY29uc3QgZ2l0aHViVGFyZ2V0QnJhbmNoID0gcHJEYXRhLmJhc2UucmVmO1xuXG4gIC8vIE5vdGU6IFdlIGRvIG5vdCBwYXNzIGEgbGlzdCBvZiBjb21taXRzIGhlcmUgYmVjYXVzZSB3ZSBkaWQgbm90IGZldGNoIHRoaXMgaW5mb3JtYXRpb25cbiAgLy8gYW5kIHRoZSBjb21taXRzIGFyZSBvbmx5IHVzZWQgZm9yIHZhbGlkYXRpb24gKHdoaWNoIHdlIGNhbiBza2lwIGhlcmUpLlxuICByZXR1cm4gZ2V0VGFyZ2V0QnJhbmNoZXNGb3JQdWxsUmVxdWVzdChnaXQuZ2l0aHViLCBjb25maWcsIGxhYmVscywgZ2l0aHViVGFyZ2V0QnJhbmNoLCBbXSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmludFRhcmdldEJyYW5jaGVzRm9yUHIocHJOdW1iZXI6IG51bWJlcikge1xuICBjb25zdCBjb25maWcgPSBnZXRDb25maWcoKTtcbiAgYXNzZXJ0VmFsaWRHaXRodWJDb25maWcoY29uZmlnKTtcbiAgYXNzZXJ0VmFsaWRNZXJnZUNvbmZpZyhjb25maWcpO1xuXG4gIGlmIChjb25maWcubWVyZ2Uubm9UYXJnZXRMYWJlbGluZykge1xuICAgIGluZm8oYFBSICMke3ByTnVtYmVyfSB3aWxsIG1lcmdlIGludG86ICR7Y29uZmlnLmdpdGh1Yi5tYWluQnJhbmNoTmFtZX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB0YXJnZXRzID0gYXdhaXQgZ2V0VGFyZ2V0QnJhbmNoZXNGb3JQcihwck51bWJlciwgY29uZmlnKTtcbiAgaW5mby5ncm91cChgUFIgIyR7cHJOdW1iZXJ9IHdpbGwgbWVyZ2UgaW50bzpgKTtcbiAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGluZm8oYC0gJHt0YXJnZXR9YCkpO1xuICBpbmZvLmdyb3VwRW5kKCk7XG59XG4iXX0=