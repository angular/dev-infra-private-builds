"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printTargetBranchesForPr = void 0;
const config_1 = require("../../utils/config");
const console_1 = require("../../utils/console");
const git_client_1 = require("../../utils/git/git-client");
const config_2 = require("../merge/config");
const target_label_1 = require("../merge/target-label");
async function getTargetBranchesForPr(prNumber, config) {
    /** Repo owner and name for the github repository. */
    const { owner, name: repo } = config.github;
    /** The singleton instance of the GitClient. */
    const git = git_client_1.GitClient.get();
    /** The current state of the pull request from Github. */
    const prData = (await git.github.pulls.get({ owner, repo, pull_number: prNumber })).data;
    /** The list of labels on the PR as strings. */
    // Note: The `name` property of labels is always set but the Github OpenAPI spec is incorrect
    // here.
    // TODO(devversion): Remove the non-null cast once
    // https://github.com/github/rest-api-description/issues/169 is fixed.
    const labels = prData.labels.map((l) => l.name);
    /** The branch targetted via the Github UI. */
    const githubTargetBranch = prData.base.ref;
    // Note: We do not pass a list of commits here because we did not fetch this information
    // and the commits are only used for validation (which we can skip here).
    return (0, target_label_1.getTargetBranchesForPullRequest)(config, labels, githubTargetBranch, []);
}
async function printTargetBranchesForPr(prNumber) {
    const config = (0, config_1.getConfig)();
    (0, config_1.assertValidGithubConfig)(config);
    (0, config_2.assertValidMergeConfig)(config);
    if (config.merge.noTargetLabeling) {
        (0, console_1.info)(`PR #${prNumber} will merge into: ${config.github.mainBranchName}`);
        return;
    }
    const targets = await getTargetBranchesForPr(prNumber, config);
    console_1.info.group(`PR #${prNumber} will merge into:`);
    targets.forEach((target) => (0, console_1.info)(`- ${target}`));
    console_1.info.groupEnd();
}
exports.printTargetBranchesForPr = printTargetBranchesForPr;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stdGFyZ2V0LWJyYW5jaGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3ByL2NoZWNrLXRhcmdldC1icmFuY2hlcy9jaGVjay10YXJnZXQtYnJhbmNoZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsK0NBQW9GO0FBQ3BGLGlEQUFxRDtBQUNyRCwyREFBcUQ7QUFDckQsNENBQW9FO0FBQ3BFLHdEQU0rQjtBQUUvQixLQUFLLFVBQVUsc0JBQXNCLENBQ25DLFFBQWdCLEVBQ2hCLE1BQWtEO0lBRWxELHFEQUFxRDtJQUNyRCxNQUFNLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzFDLCtDQUErQztJQUMvQyxNQUFNLEdBQUcsR0FBRyxzQkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRTVCLHlEQUF5RDtJQUN6RCxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN2RiwrQ0FBK0M7SUFDL0MsNkZBQTZGO0lBQzdGLFFBQVE7SUFDUixrREFBa0Q7SUFDbEQsc0VBQXNFO0lBQ3RFLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSyxDQUFDLENBQUM7SUFDakQsOENBQThDO0lBQzlDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFFM0Msd0ZBQXdGO0lBQ3hGLHlFQUF5RTtJQUN6RSxPQUFPLElBQUEsOENBQStCLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBRU0sS0FBSyxVQUFVLHdCQUF3QixDQUFDLFFBQWdCO0lBQzdELE1BQU0sTUFBTSxHQUFHLElBQUEsa0JBQVMsR0FBRSxDQUFDO0lBQzNCLElBQUEsZ0NBQXVCLEVBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsSUFBQSwrQkFBc0IsRUFBQyxNQUFNLENBQUMsQ0FBQztJQUUvQixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7UUFDakMsSUFBQSxjQUFJLEVBQUMsT0FBTyxRQUFRLHFCQUFxQixNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDekUsT0FBTztLQUNSO0lBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0QsY0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLFFBQVEsbUJBQW1CLENBQUMsQ0FBQztJQUMvQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFBLGNBQUksRUFBQyxLQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRCxjQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbEIsQ0FBQztBQWRELDREQWNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7YXNzZXJ0VmFsaWRHaXRodWJDb25maWcsIGdldENvbmZpZywgR2l0aHViQ29uZmlnfSBmcm9tICcuLi8uLi91dGlscy9jb25maWcnO1xuaW1wb3J0IHtlcnJvciwgaW5mbywgcmVkfSBmcm9tICcuLi8uLi91dGlscy9jb25zb2xlJztcbmltcG9ydCB7R2l0Q2xpZW50fSBmcm9tICcuLi8uLi91dGlscy9naXQvZ2l0LWNsaWVudCc7XG5pbXBvcnQge2Fzc2VydFZhbGlkTWVyZ2VDb25maWcsIE1lcmdlQ29uZmlnfSBmcm9tICcuLi9tZXJnZS9jb25maWcnO1xuaW1wb3J0IHtcbiAgZ2V0QnJhbmNoZXNGcm9tVGFyZ2V0TGFiZWwsXG4gIGdldE1hdGNoaW5nVGFyZ2V0TGFiZWxGb3JQdWxsUmVxdWVzdCxcbiAgZ2V0VGFyZ2V0QnJhbmNoZXNGb3JQdWxsUmVxdWVzdCxcbiAgSW52YWxpZFRhcmdldExhYmVsRXJyb3IsXG4gIFRhcmdldExhYmVsLFxufSBmcm9tICcuLi9tZXJnZS90YXJnZXQtbGFiZWwnO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRUYXJnZXRCcmFuY2hlc0ZvclByKFxuICBwck51bWJlcjogbnVtYmVyLFxuICBjb25maWc6IHtnaXRodWI6IEdpdGh1YkNvbmZpZzsgbWVyZ2U6IE1lcmdlQ29uZmlnfSxcbikge1xuICAvKiogUmVwbyBvd25lciBhbmQgbmFtZSBmb3IgdGhlIGdpdGh1YiByZXBvc2l0b3J5LiAqL1xuICBjb25zdCB7b3duZXIsIG5hbWU6IHJlcG99ID0gY29uZmlnLmdpdGh1YjtcbiAgLyoqIFRoZSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIEdpdENsaWVudC4gKi9cbiAgY29uc3QgZ2l0ID0gR2l0Q2xpZW50LmdldCgpO1xuXG4gIC8qKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcHVsbCByZXF1ZXN0IGZyb20gR2l0aHViLiAqL1xuICBjb25zdCBwckRhdGEgPSAoYXdhaXQgZ2l0LmdpdGh1Yi5wdWxscy5nZXQoe293bmVyLCByZXBvLCBwdWxsX251bWJlcjogcHJOdW1iZXJ9KSkuZGF0YTtcbiAgLyoqIFRoZSBsaXN0IG9mIGxhYmVscyBvbiB0aGUgUFIgYXMgc3RyaW5ncy4gKi9cbiAgLy8gTm90ZTogVGhlIGBuYW1lYCBwcm9wZXJ0eSBvZiBsYWJlbHMgaXMgYWx3YXlzIHNldCBidXQgdGhlIEdpdGh1YiBPcGVuQVBJIHNwZWMgaXMgaW5jb3JyZWN0XG4gIC8vIGhlcmUuXG4gIC8vIFRPRE8oZGV2dmVyc2lvbik6IFJlbW92ZSB0aGUgbm9uLW51bGwgY2FzdCBvbmNlXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9naXRodWIvcmVzdC1hcGktZGVzY3JpcHRpb24vaXNzdWVzLzE2OSBpcyBmaXhlZC5cbiAgY29uc3QgbGFiZWxzID0gcHJEYXRhLmxhYmVscy5tYXAoKGwpID0+IGwubmFtZSEpO1xuICAvKiogVGhlIGJyYW5jaCB0YXJnZXR0ZWQgdmlhIHRoZSBHaXRodWIgVUkuICovXG4gIGNvbnN0IGdpdGh1YlRhcmdldEJyYW5jaCA9IHByRGF0YS5iYXNlLnJlZjtcblxuICAvLyBOb3RlOiBXZSBkbyBub3QgcGFzcyBhIGxpc3Qgb2YgY29tbWl0cyBoZXJlIGJlY2F1c2Ugd2UgZGlkIG5vdCBmZXRjaCB0aGlzIGluZm9ybWF0aW9uXG4gIC8vIGFuZCB0aGUgY29tbWl0cyBhcmUgb25seSB1c2VkIGZvciB2YWxpZGF0aW9uICh3aGljaCB3ZSBjYW4gc2tpcCBoZXJlKS5cbiAgcmV0dXJuIGdldFRhcmdldEJyYW5jaGVzRm9yUHVsbFJlcXVlc3QoY29uZmlnLCBsYWJlbHMsIGdpdGh1YlRhcmdldEJyYW5jaCwgW10pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJpbnRUYXJnZXRCcmFuY2hlc0ZvclByKHByTnVtYmVyOiBudW1iZXIpIHtcbiAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKCk7XG4gIGFzc2VydFZhbGlkR2l0aHViQ29uZmlnKGNvbmZpZyk7XG4gIGFzc2VydFZhbGlkTWVyZ2VDb25maWcoY29uZmlnKTtcblxuICBpZiAoY29uZmlnLm1lcmdlLm5vVGFyZ2V0TGFiZWxpbmcpIHtcbiAgICBpbmZvKGBQUiAjJHtwck51bWJlcn0gd2lsbCBtZXJnZSBpbnRvOiAke2NvbmZpZy5naXRodWIubWFpbkJyYW5jaE5hbWV9YCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdGFyZ2V0cyA9IGF3YWl0IGdldFRhcmdldEJyYW5jaGVzRm9yUHIocHJOdW1iZXIsIGNvbmZpZyk7XG4gIGluZm8uZ3JvdXAoYFBSICMke3ByTnVtYmVyfSB3aWxsIG1lcmdlIGludG86YCk7XG4gIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBpbmZvKGAtICR7dGFyZ2V0fWApKTtcbiAgaW5mby5ncm91cEVuZCgpO1xufVxuIl19