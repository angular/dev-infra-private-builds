"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBranchesFromTargetLabel = exports.getTargetBranchesForPullRequest = exports.getMatchingTargetLabelForPullRequest = exports.InvalidTargetLabelError = exports.InvalidTargetBranchError = exports.TargetLabelName = void 0;
const labels_1 = require("./labels");
const validations_1 = require("../validation/validations");
const failures_1 = require("../validation/failures");
const versioning_1 = require("../../../release/versioning");
/**
 * Enum capturing available target label names in the Angular organization. A target
 * label is set on a pull request to specify where its changes should land.
 *
 * More details can be found here:
 * https://docs.google.com/document/d/197kVillDwx-RZtSVOBtPb4BBIAw0E9RT3q3v6DZkykU#heading=h.lkuypj38h15d
 */
var TargetLabelName;
(function (TargetLabelName) {
    TargetLabelName["MAJOR"] = "target: major";
    TargetLabelName["MINOR"] = "target: minor";
    TargetLabelName["PATCH"] = "target: patch";
    TargetLabelName["RELEASE_CANDIDATE"] = "target: rc";
    TargetLabelName["LONG_TERM_SUPPORT"] = "target: lts";
})(TargetLabelName = exports.TargetLabelName || (exports.TargetLabelName = {}));
/**
 * Unique error that can be thrown in the merge configuration if an
 * invalid branch is targeted.
 */
class InvalidTargetBranchError {
    constructor(failureMessage) {
        this.failureMessage = failureMessage;
    }
}
exports.InvalidTargetBranchError = InvalidTargetBranchError;
/**
 * Unique error that can be thrown in the merge configuration if an
 * invalid label has been applied to a pull request.
 */
class InvalidTargetLabelError {
    constructor(failureMessage) {
        this.failureMessage = failureMessage;
    }
}
exports.InvalidTargetLabelError = InvalidTargetLabelError;
/** Gets the target label from the specified pull request labels. */
async function getMatchingTargetLabelForPullRequest(config, labelsOnPullRequest, allTargetLabels) {
    if (config.noTargetLabeling) {
        throw Error('This repository does not use target labels');
    }
    const matches = [];
    for (const label of labelsOnPullRequest) {
        const match = allTargetLabels.find(({ name }) => label === name);
        if (match !== undefined) {
            matches.push(match);
        }
    }
    if (matches.length === 1) {
        return matches[0];
    }
    if (matches.length === 0) {
        throw new InvalidTargetLabelError('Unable to determine target for the PR as it has no target label.');
    }
    throw new InvalidTargetLabelError('Unable to determine target for the PR as it has multiple target labels.');
}
exports.getMatchingTargetLabelForPullRequest = getMatchingTargetLabelForPullRequest;
/** Get the branches the pull request should be merged into. */
async function getTargetBranchesForPullRequest(api, config, labelsOnPullRequest, githubTargetBranch, commits) {
    if (config.pullRequest.noTargetLabeling) {
        return [config.github.mainBranchName];
    }
    // If branches are determined for a given target label, capture errors that are
    // thrown as part of branch computation. This is expected because a merge configuration
    // can lazily compute branches for a target label and throw. e.g. if an invalid target
    // label is applied, we want to exit the script gracefully with an error message.
    try {
        const { mainBranchName, name, owner } = config.github;
        const releaseTrains = await (0, versioning_1.fetchActiveReleaseTrains)({
            name,
            nextBranchName: mainBranchName,
            owner,
            api,
        });
        const targetLabels = await (0, labels_1.getTargetLabelsForActiveReleaseTrains)(releaseTrains, api, config);
        const matchingLabel = await getMatchingTargetLabelForPullRequest(config.pullRequest, labelsOnPullRequest, targetLabels);
        const targetBranches = await getBranchesFromTargetLabel(matchingLabel, githubTargetBranch);
        (0, validations_1.assertChangesAllowForTargetLabel)(commits, matchingLabel, config.pullRequest, releaseTrains, labelsOnPullRequest);
        return targetBranches;
    }
    catch (error) {
        if (error instanceof InvalidTargetBranchError || error instanceof InvalidTargetLabelError) {
            throw new failures_1.PullRequestFailure(error.failureMessage);
        }
        throw error;
    }
}
exports.getTargetBranchesForPullRequest = getTargetBranchesForPullRequest;
/**
 * Gets the branches from the specified target label.
 *
 * @throws {InvalidTargetLabelError} Invalid label has been applied to pull request.
 * @throws {InvalidTargetBranchError} Invalid Github target branch has been selected.
 */
async function getBranchesFromTargetLabel(label, githubTargetBranch) {
    return typeof label.branches === 'function'
        ? await label.branches(githubTargetBranch)
        : await label.branches;
}
exports.getBranchesFromTargetLabel = getBranchesFromTargetLabel;
//# sourceMappingURL=data:application/json;base64,