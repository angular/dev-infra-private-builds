"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.breakingChangeLabel = exports.assertValidPullRequestConfig = void 0;
const config_1 = require("../../utils/config");
/** Loads and validates the merge configuration. */
function assertValidPullRequestConfig(config) {
    const errors = [];
    if (config.pullRequest === undefined) {
        throw new config_1.ConfigValidationError('No pullRequest configuration found. Set the `pullRequest` configuration.');
    }
    if (!config.pullRequest.claSignedLabel) {
        errors.push('No CLA signed label configured.');
    }
    if (!config.pullRequest.mergeReadyLabel) {
        errors.push('No merge ready label configured.');
    }
    if (config.pullRequest.githubApiMerge === undefined) {
        errors.push('No explicit choice of merge strategy. Please set `githubApiMerge`.');
    }
    if (errors.length) {
        throw new config_1.ConfigValidationError('Invalid `pullRequest` configuration', errors);
    }
}
exports.assertValidPullRequestConfig = assertValidPullRequestConfig;
/** Label for pull requests containing a breaking change. */
exports.breakingChangeLabel = 'flag: breaking change';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcHIvY29uZmlnL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUVILCtDQUF1RTtBQWlEdkUsbURBQW1EO0FBQ25ELFNBQWdCLDRCQUE0QixDQUMxQyxNQUFxRDtJQUVyRCxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDNUIsSUFBSSxNQUFNLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtRQUNwQyxNQUFNLElBQUksOEJBQXFCLENBQzdCLDBFQUEwRSxDQUMzRSxDQUFDO0tBQ0g7SUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUU7UUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztLQUNqRDtJQUNELElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFFO1FBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsb0VBQW9FLENBQUMsQ0FBQztLQUNuRjtJQUVELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUNqQixNQUFNLElBQUksOEJBQXFCLENBQUMscUNBQXFDLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDaEY7QUFDSCxDQUFDO0FBdkJELG9FQXVCQztBQUVELDREQUE0RDtBQUMvQyxRQUFBLG1CQUFtQixHQUFHLHVCQUF1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Q29uZmlnVmFsaWRhdGlvbkVycm9yLCBHaXRodWJDb25maWd9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmZpZyc7XG5cbi8qKlxuICogUG9zc2libGUgbWVyZ2UgbWV0aG9kcyBzdXBwb3J0ZWQgYnkgdGhlIEdpdGh1YiBBUEkuXG4gKiBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3B1bGxzLyNtZXJnZS1hLXB1bGwtcmVxdWVzdC1tZXJnZS1idXR0b24uXG4gKi9cbmV4cG9ydCB0eXBlIEdpdGh1YkFwaU1lcmdlTWV0aG9kID0gJ21lcmdlJyB8ICdzcXVhc2gnIHwgJ3JlYmFzZSc7XG5cbi8qKiBDb25maWd1cmF0aW9uIGZvciB0aGUgR2l0aHViIEFQSSBtZXJnZSBzdHJhdGVneS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2l0aHViQXBpTWVyZ2VTdHJhdGVneUNvbmZpZyB7XG4gIC8qKiBEZWZhdWx0IG1ldGhvZCB1c2VkIGZvciBtZXJnaW5nIHB1bGwgcmVxdWVzdHMgKi9cbiAgZGVmYXVsdDogR2l0aHViQXBpTWVyZ2VNZXRob2Q7XG4gIC8qKiBMYWJlbHMgd2hpY2ggc3BlY2lmeSBhIGRpZmZlcmVudCBtZXJnZSBtZXRob2QgdGhhbiB0aGUgZGVmYXVsdC4gKi9cbiAgbGFiZWxzPzoge3BhdHRlcm46IHN0cmluZzsgbWV0aG9kOiBHaXRodWJBcGlNZXJnZU1ldGhvZH1bXTtcbn1cblxuLyoqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBtZXJnZSBzY3JpcHQuICovXG5leHBvcnQgaW50ZXJmYWNlIFB1bGxSZXF1ZXN0Q29uZmlnIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSB1cHN0cmVhbSByZW1vdGUuIEFsbCBvZiB0aGVzZSBvcHRpb25zIGFyZSBvcHRpb25hbCBhc1xuICAgKiBkZWZhdWx0cyBhcmUgcHJvdmlkZWQgYnkgdGhlIGNvbW1vbiBkZXYtaW5mcmEgZ2l0aHViIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICByZW1vdGU/OiBHaXRodWJDb25maWc7XG4gIC8qKiBMaXN0IG9mIHRhcmdldCBsYWJlbHMuICovXG4gIG5vVGFyZ2V0TGFiZWxpbmc/OiBib29sZWFuO1xuICAvKiogUmVxdWlyZWQgYmFzZSBjb21taXRzIGZvciBnaXZlbiBicmFuY2hlcy4gKi9cbiAgcmVxdWlyZWRCYXNlQ29tbWl0cz86IHtbYnJhbmNoTmFtZTogc3RyaW5nXTogc3RyaW5nfTtcbiAgLyoqIFBhdHRlcm4gdGhhdCBtYXRjaGVzIGxhYmVscyB3aGljaCBpbXBseSBhIHNpZ25lZCBDTEEuICovXG4gIGNsYVNpZ25lZExhYmVsOiBzdHJpbmcgfCBSZWdFeHA7XG4gIC8qKiBQYXR0ZXJuIHRoYXQgbWF0Y2hlcyBsYWJlbHMgd2hpY2ggaW1wbHkgYSBtZXJnZSByZWFkeSBwdWxsIHJlcXVlc3QuICovXG4gIG1lcmdlUmVhZHlMYWJlbDogc3RyaW5nIHwgUmVnRXhwO1xuICAvKiogTGFiZWwgdGhhdCBpcyBhcHBsaWVkIHdoZW4gc3BlY2lhbCBhdHRlbnRpb24gZnJvbSB0aGUgY2FyZXRha2VyIGlzIHJlcXVpcmVkLiAqL1xuICBjYXJldGFrZXJOb3RlTGFiZWw/OiBzdHJpbmcgfCBSZWdFeHA7XG4gIC8qKiBMYWJlbCB3aGljaCBjYW4gYmUgYXBwbGllZCB0byBmaXh1cCBjb21taXQgbWVzc2FnZXMgaW4gdGhlIG1lcmdlIHNjcmlwdC4gKi9cbiAgY29tbWl0TWVzc2FnZUZpeHVwTGFiZWw6IHN0cmluZyB8IFJlZ0V4cDtcbiAgLyoqXG4gICAqIFdoZXRoZXIgcHVsbCByZXF1ZXN0cyBzaG91bGQgYmUgbWVyZ2VkIHVzaW5nIHRoZSBHaXRodWIgQVBJLiBUaGlzIGNhbiBiZSBlbmFibGVkXG4gICAqIGlmIHByb2plY3RzIHdhbnQgdG8gaGF2ZSB0aGVpciBwdWxsIHJlcXVlc3RzIHNob3cgdXAgYXMgYE1lcmdlZGAgaW4gdGhlIEdpdGh1YiBVSS5cbiAgICogVGhlIGRvd25zaWRlIGlzIHRoYXQgZml4dXAgb3Igc3F1YXNoIGNvbW1pdHMgbm8gbG9uZ2VyIHdvcmsgYXMgdGhlIEdpdGh1YiBBUEkgZG9lc1xuICAgKiBub3Qgc3VwcG9ydCB0aGlzLlxuICAgKi9cbiAgZ2l0aHViQXBpTWVyZ2U6IGZhbHNlIHwgR2l0aHViQXBpTWVyZ2VTdHJhdGVneUNvbmZpZztcbiAgLyoqXG4gICAqIExpc3Qgb2YgY29tbWl0IHNjb3BlcyB3aGljaCBhcmUgZXhlbXB0ZWQgZnJvbSB0YXJnZXQgbGFiZWwgY29udGVudCByZXF1aXJlbWVudHMuIGkuZS4gbm8gYGZlYXRgXG4gICAqIHNjb3BlcyBpbiBwYXRjaCBicmFuY2hlcywgbm8gYnJlYWtpbmcgY2hhbmdlcyBpbiBtaW5vciBvciBwYXRjaCBjaGFuZ2VzLlxuICAgKi9cbiAgdGFyZ2V0TGFiZWxFeGVtcHRTY29wZXM/OiBzdHJpbmdbXTtcbn1cblxuLyoqIExvYWRzIGFuZCB2YWxpZGF0ZXMgdGhlIG1lcmdlIGNvbmZpZ3VyYXRpb24uICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VmFsaWRQdWxsUmVxdWVzdENvbmZpZzxUPihcbiAgY29uZmlnOiBUICYgUGFydGlhbDx7cHVsbFJlcXVlc3Q6IFB1bGxSZXF1ZXN0Q29uZmlnfT4sXG4pOiBhc3NlcnRzIGNvbmZpZyBpcyBUICYge3B1bGxSZXF1ZXN0OiBQdWxsUmVxdWVzdENvbmZpZ30ge1xuICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XG4gIGlmIChjb25maWcucHVsbFJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBDb25maWdWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAnTm8gcHVsbFJlcXVlc3QgY29uZmlndXJhdGlvbiBmb3VuZC4gU2V0IHRoZSBgcHVsbFJlcXVlc3RgIGNvbmZpZ3VyYXRpb24uJyxcbiAgICApO1xuICB9XG5cbiAgaWYgKCFjb25maWcucHVsbFJlcXVlc3QuY2xhU2lnbmVkTGFiZWwpIHtcbiAgICBlcnJvcnMucHVzaCgnTm8gQ0xBIHNpZ25lZCBsYWJlbCBjb25maWd1cmVkLicpO1xuICB9XG4gIGlmICghY29uZmlnLnB1bGxSZXF1ZXN0Lm1lcmdlUmVhZHlMYWJlbCkge1xuICAgIGVycm9ycy5wdXNoKCdObyBtZXJnZSByZWFkeSBsYWJlbCBjb25maWd1cmVkLicpO1xuICB9XG4gIGlmIChjb25maWcucHVsbFJlcXVlc3QuZ2l0aHViQXBpTWVyZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgIGVycm9ycy5wdXNoKCdObyBleHBsaWNpdCBjaG9pY2Ugb2YgbWVyZ2Ugc3RyYXRlZ3kuIFBsZWFzZSBzZXQgYGdpdGh1YkFwaU1lcmdlYC4nKTtcbiAgfVxuXG4gIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IENvbmZpZ1ZhbGlkYXRpb25FcnJvcignSW52YWxpZCBgcHVsbFJlcXVlc3RgIGNvbmZpZ3VyYXRpb24nLCBlcnJvcnMpO1xuICB9XG59XG5cbi8qKiBMYWJlbCBmb3IgcHVsbCByZXF1ZXN0cyBjb250YWluaW5nIGEgYnJlYWtpbmcgY2hhbmdlLiAqL1xuZXhwb3J0IGNvbnN0IGJyZWFraW5nQ2hhbmdlTGFiZWwgPSAnZmxhZzogYnJlYWtpbmcgY2hhbmdlJztcbiJdfQ==