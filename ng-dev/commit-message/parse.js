"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCommitFromGitLog = exports.parseCommitMessage = exports.gitLogFormatForParsing = exports.commitFieldsAsFormat = void 0;
const conventional_commits_parser_1 = require("conventional-commits-parser");
/**
 * A list of tuples expressing the fields to extract from each commit log entry. The tuple contains
 * two values, the first is the key for the property and the second is the template shortcut for the
 * git log command.
 */
const commitFields = {
    hash: '%H',
    shortHash: '%h',
    author: '%aN',
};
/** The commit fields described as git log format entries for parsing. */
const commitFieldsAsFormat = (fields) => {
    return Object.entries(fields)
        .map(([key, value]) => `%n-${key}-%n${value}`)
        .join('');
};
exports.commitFieldsAsFormat = commitFieldsAsFormat;
/**
 * The git log format template to create git log entries for parsing.
 *
 * The conventional commits parser expects to parse the standard git log raw body (%B) into its
 * component parts. Additionally it will parse additional fields with keys defined by
 * `-{key name}-` separated by new lines.
 * */
exports.gitLogFormatForParsing = `%B${exports.commitFieldsAsFormat(commitFields)}`;
/** Markers used to denote the start of a note section in a commit. */
var NoteSections;
(function (NoteSections) {
    NoteSections["BREAKING_CHANGE"] = "BREAKING CHANGE";
    NoteSections["DEPRECATED"] = "DEPRECATED";
})(NoteSections || (NoteSections = {}));
/** Regex determining if a commit is a fixup. */
const FIXUP_PREFIX_RE = /^fixup! /i;
/** Regex determining if a commit is a squash. */
const SQUASH_PREFIX_RE = /^squash! /i;
/** Regex determining if a commit is a revert. */
const REVERT_PREFIX_RE = /^revert:? /i;
/**
 * Regex pattern for parsing the header line of a commit.
 *
 * Several groups are being matched to be used in the parsed commit object, being mapped to the
 * `headerCorrespondence` object.
 *
 * The pattern can be broken down into component parts:
 * - `(\w+)` - a capturing group discovering the type of the commit.
 * - `(?:\(([^)]+)\))?` - an optional capturing group to capture the scope of the commit.
 * - `(.*)` - a capturing group discovering the subject of the commit.
 */
const headerPattern = /^(\w+)(?:\(([^)]+)\))?: (.*)$/;
/**
 * The property names used for the values extracted from the header via the
 * `headerPattern` regex.
 */
const headerCorrespondence = ['type', 'scope', 'subject'];
/**
 * Configuration options for the commit parser.
 *
 * NOTE: An extended type from `Options` must be used because the current
 * @types/conventional-commits-parser version does not include the `notesPattern` field.
 */
const parseOptions = {
    commentChar: '#',
    headerPattern,
    headerCorrespondence,
    noteKeywords: [NoteSections.BREAKING_CHANGE, NoteSections.DEPRECATED],
    notesPattern: (keywords) => new RegExp(`^\s*(${keywords}): ?(.*)`),
};
/** Parse a commit message into its composite parts. */
exports.parseCommitMessage = parseInternal;
/** Parse a commit message from a git log entry into its composite parts. */
exports.parseCommitFromGitLog = parseInternal;
function parseInternal(fullText) {
    // Ensure the fullText symbol is a `string`, even if a Buffer was provided.
    fullText = fullText.toString();
    /** The commit message text with the fixup and squash markers stripped out. */
    const strippedCommitMsg = fullText
        .replace(FIXUP_PREFIX_RE, '')
        .replace(SQUASH_PREFIX_RE, '')
        .replace(REVERT_PREFIX_RE, '');
    /** The initially parsed commit. */
    const commit = conventional_commits_parser_1.sync(strippedCommitMsg, parseOptions);
    /** A list of breaking change notes from the commit. */
    const breakingChanges = [];
    /** A list of deprecation notes from the commit. */
    const deprecations = [];
    // Extract the commit message notes by marked types into their respective lists.
    commit.notes.forEach((note) => {
        if (note.title === NoteSections.BREAKING_CHANGE) {
            breakingChanges.push(note);
        }
        else if (note.title === NoteSections.DEPRECATED) {
            deprecations.push(note);
        }
    });
    return {
        fullText,
        breakingChanges,
        deprecations,
        body: commit.body || '',
        footer: commit.footer || '',
        header: commit.header || '',
        references: commit.references,
        scope: commit.scope || '',
        subject: commit.subject || '',
        type: commit.type || '',
        isFixup: FIXUP_PREFIX_RE.test(fullText),
        isSquash: SQUASH_PREFIX_RE.test(fullText),
        isRevert: REVERT_PREFIX_RE.test(fullText),
        author: commit.author || undefined,
        hash: commit.hash || undefined,
        shortHash: commit.shortHash || undefined,
    };
}
//# sourceMappingURL=data:application/json;base64,