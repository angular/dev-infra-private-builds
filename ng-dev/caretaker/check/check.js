"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkServiceStatuses = void 0;
const config_1 = require("../../utils/config");
const config_2 = require("../config");
const ci_1 = require("./ci");
const g3_1 = require("./g3");
const github_1 = require("./github");
const services_1 = require("./services");
/** List of modules checked for the caretaker check command. */
const moduleList = [github_1.GithubQueriesModule, services_1.ServicesModule, ci_1.CiModule, g3_1.G3Module];
/** Check the status of services which Angular caretakers need to monitor. */
async function checkServiceStatuses() {
    /** The configuration for the caretaker commands. */
    const config = config_1.getConfig();
    config_2.assertValidCaretakerConfig(config);
    config_1.assertValidGithubConfig(config);
    /** List of instances of Caretaker Check modules */
    const caretakerCheckModules = moduleList.map((module) => new module(config));
    // Module's `data` is casted as Promise<unknown> because the data types of the `module`'s `data`
    // promises do not match typings, however our usage here is only to determine when the promise
    // resolves.
    await Promise.all(caretakerCheckModules.map((module) => module.data));
    for (const module of caretakerCheckModules) {
        await module.printToTerminal();
    }
}
exports.checkServiceStatuses = checkServiceStatuses;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvY2FyZXRha2VyL2NoZWNrL2NoZWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUVILCtDQUFzRTtBQUN0RSxzQ0FBcUQ7QUFFckQsNkJBQThCO0FBQzlCLDZCQUE4QjtBQUM5QixxQ0FBNkM7QUFDN0MseUNBQTBDO0FBRTFDLCtEQUErRDtBQUMvRCxNQUFNLFVBQVUsR0FBRyxDQUFDLDRCQUFtQixFQUFFLHlCQUFjLEVBQUUsYUFBUSxFQUFFLGFBQVEsQ0FBQyxDQUFDO0FBRTdFLDZFQUE2RTtBQUN0RSxLQUFLLFVBQVUsb0JBQW9CO0lBQ3hDLG9EQUFvRDtJQUNwRCxNQUFNLE1BQU0sR0FBRyxrQkFBUyxFQUFFLENBQUM7SUFDM0IsbUNBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsZ0NBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsbURBQW1EO0lBQ25ELE1BQU0scUJBQXFCLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUU3RSxnR0FBZ0c7SUFDaEcsOEZBQThGO0lBQzlGLFlBQVk7SUFDWixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBd0IsQ0FBQyxDQUFDLENBQUM7SUFFMUYsS0FBSyxNQUFNLE1BQU0sSUFBSSxxQkFBcUIsRUFBRTtRQUMxQyxNQUFNLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUNoQztBQUNILENBQUM7QUFoQkQsb0RBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7YXNzZXJ0VmFsaWRHaXRodWJDb25maWcsIGdldENvbmZpZ30gZnJvbSAnLi4vLi4vdXRpbHMvY29uZmlnJztcbmltcG9ydCB7YXNzZXJ0VmFsaWRDYXJldGFrZXJDb25maWd9IGZyb20gJy4uL2NvbmZpZyc7XG5cbmltcG9ydCB7Q2lNb2R1bGV9IGZyb20gJy4vY2knO1xuaW1wb3J0IHtHM01vZHVsZX0gZnJvbSAnLi9nMyc7XG5pbXBvcnQge0dpdGh1YlF1ZXJpZXNNb2R1bGV9IGZyb20gJy4vZ2l0aHViJztcbmltcG9ydCB7U2VydmljZXNNb2R1bGV9IGZyb20gJy4vc2VydmljZXMnO1xuXG4vKiogTGlzdCBvZiBtb2R1bGVzIGNoZWNrZWQgZm9yIHRoZSBjYXJldGFrZXIgY2hlY2sgY29tbWFuZC4gKi9cbmNvbnN0IG1vZHVsZUxpc3QgPSBbR2l0aHViUXVlcmllc01vZHVsZSwgU2VydmljZXNNb2R1bGUsIENpTW9kdWxlLCBHM01vZHVsZV07XG5cbi8qKiBDaGVjayB0aGUgc3RhdHVzIG9mIHNlcnZpY2VzIHdoaWNoIEFuZ3VsYXIgY2FyZXRha2VycyBuZWVkIHRvIG1vbml0b3IuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tTZXJ2aWNlU3RhdHVzZXMoKSB7XG4gIC8qKiBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGNhcmV0YWtlciBjb21tYW5kcy4gKi9cbiAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKCk7XG4gIGFzc2VydFZhbGlkQ2FyZXRha2VyQ29uZmlnKGNvbmZpZyk7XG4gIGFzc2VydFZhbGlkR2l0aHViQ29uZmlnKGNvbmZpZyk7XG4gIC8qKiBMaXN0IG9mIGluc3RhbmNlcyBvZiBDYXJldGFrZXIgQ2hlY2sgbW9kdWxlcyAqL1xuICBjb25zdCBjYXJldGFrZXJDaGVja01vZHVsZXMgPSBtb2R1bGVMaXN0Lm1hcCgobW9kdWxlKSA9PiBuZXcgbW9kdWxlKGNvbmZpZykpO1xuXG4gIC8vIE1vZHVsZSdzIGBkYXRhYCBpcyBjYXN0ZWQgYXMgUHJvbWlzZTx1bmtub3duPiBiZWNhdXNlIHRoZSBkYXRhIHR5cGVzIG9mIHRoZSBgbW9kdWxlYCdzIGBkYXRhYFxuICAvLyBwcm9taXNlcyBkbyBub3QgbWF0Y2ggdHlwaW5ncywgaG93ZXZlciBvdXIgdXNhZ2UgaGVyZSBpcyBvbmx5IHRvIGRldGVybWluZSB3aGVuIHRoZSBwcm9taXNlXG4gIC8vIHJlc29sdmVzLlxuICBhd2FpdCBQcm9taXNlLmFsbChjYXJldGFrZXJDaGVja01vZHVsZXMubWFwKChtb2R1bGUpID0+IG1vZHVsZS5kYXRhIGFzIFByb21pc2U8dW5rbm93bj4pKTtcblxuICBmb3IgKGNvbnN0IG1vZHVsZSBvZiBjYXJldGFrZXJDaGVja01vZHVsZXMpIHtcbiAgICBhd2FpdCBtb2R1bGUucHJpbnRUb1Rlcm1pbmFsKCk7XG4gIH1cbn1cbiJdfQ==